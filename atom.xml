<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sean's Blog]]></title>
  <link href="http://seanguo.github.io/atom.xml" rel="self"/>
  <link href="http://seanguo.github.io/"/>
  <updated>2017-05-28T21:03:34+08:00</updated>
  <id>http://seanguo.github.io/</id>
  <author>
    <name><![CDATA[Sean Guo]]></name>
    <email><![CDATA[seanguo85@qq.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shell+Ruby]]></title>
    <link href="http://seanguo.github.io/blog/2017/05/28/shell-plus-ruby/"/>
    <updated>2017-05-28T20:25:34+08:00</updated>
    <id>http://seanguo.github.io/blog/2017/05/28/shell-plus-ruby</id>
    <content type="html"><![CDATA[<p>最近公司产品的新特性开发的不是那么多了，所以自己有时间闲下来偿还一下以前欠下的技术债。公司的发版流程是自己一步步实现出来的，整体结构是由一个个的shell脚本来实现的。把发版的每一个步骤拆分为独立的一个个脚本，这样流程变化了可以通过脚本组合的变化来适应变化。毕竟能够维持不变的东西永远是<strong>变化</strong>。</p>

<p>以前的问题是由于当时开发的紧迫性，加上自己对脚本的不太重视，导致开发的这些脚本整体结构还算好，但是就是里面会有很多重复的常量在里面。这里的常量就是要发版的各个组件的名字，由于目前产品组件的不确定性，经常会添加或者删除一个组件，目前的缺点就是添加或者删除一个组件的时候需要更改多个脚本，违背了SPOT原则，会很容易遗落下本应同步修改的脚本。</p>

<p>这次自己有时间了决定把这些常量提取出去作为一个配置文件单独存在，思路是简单而直接的，但是由于shell脚本的局限性，把组件名字提出去还算可行，但是我想要对每个组件加上单独的其他配置的话好像比较绕。以以下脚本为例来说：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>repo in <span class="s2">&quot;COM_A COM_B COM_C&quot;</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">cd</span> <span class="nv">$repo</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$repo</span> <span class="o">==</span> <span class="s2">&quot;COM_B&quot;</span>
</span><span class='line'>    <span class="nb">cd </span>modules
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span>mvn <span class="nv">setVersion</span><span class="o">=</span><span class="nv">$newVersion</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个脚本是迭代每个组件，然后去修改pom.xml里面的version改为要发版的version，问题有的组件的parent的pom.xml没在根目录下，需要切换到对应的目录才能进行操作。</p>

<p>我们可以很容易就把 &ldquo;COM_A COM_B COM_C&rdquo; 提取出去， 例如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">all_repos</span><span class="o">=</span><span class="s2">&quot;COM_A COM_B COM_C&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样脚本就变成了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">for </span>repo in <span class="nv">$all_repos</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">cd</span> <span class="nv">$repo</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span> <span class="nv">$repo</span> <span class="o">==</span> <span class="s2">&quot;oneRepo&quot;</span>
</span><span class='line'>    <span class="nb">cd </span>modules
</span><span class='line'>  <span class="k">fi</span>
</span><span class='line'><span class="k">  </span>mvn versions:set -DnewVersion<span class="o">=</span><span class="nv">$newVersion</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题是这个modules目录怎么配置出去，想过这样去做：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">COM_B_pom_path</span><span class="o">=</span>modules
</span></code></pre></td></tr></table></div></figure>


<p>但是问题是这只是一个配置而已，因为发版流程还涉及到其他的目录，像我们的组件用的Chef的cookbook来配置安装，所以我还要配置这个cookbook的路径，然后我们的cookbook用的test kitchen来测试，所以还要配置test kitchen的测试文件所在的路径，这样会有很多export，可读性和可维护性都很差。</p>

<p>根据以往的经验，所有复杂的问题理论上都可以经过抽象或者添加中间层的方式来简化实现。这里我想到了用Ruby来生成shell需要的export全局变量，然后既然用到Ruby了很自然的配置文件就用到了YAML。这种配置文件既简洁又保持了很好的可读性。下面就是就是yaml关于这次修改的部分样例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">---</span>
</span><span class='line'><span class="n">components</span>
</span><span class='line'>  <span class="no">COM_A</span>
</span><span class='line'>      <span class="ss">pom</span><span class="p">:</span> <span class="sr">/</span>
</span><span class='line'><span class="sr">     cookbook: cookbook</span>
</span><span class='line'><span class="sr">     test_kitchen: /</span>
</span><span class='line'>  <span class="no">COM_B</span>
</span><span class='line'>    <span class="ss">pom</span><span class="p">:</span> <span class="n">modules</span>
</span><span class='line'>    <span class="ss">cookbook</span><span class="p">:</span> <span class="n">cookbook</span>
</span><span class='line'>      <span class="n">test_kitchen</span><span class="p">:</span> <span class="sr">/</span>
</span><span class='line'><span class="sr">  COM_C</span>
</span><span class='line'><span class="sr">     pom: /</span>
</span><span class='line'>      <span class="ss">cookbook</span><span class="p">:</span> <span class="n">cookbook</span>
</span><span class='line'>      <span class="n">test_kitchen</span><span class="p">:</span> <span class="sr">/</span>
</span><span class='line'><span class="sr">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样我们可以很容易的实现一段Ruby代码来生成这个shell的环境文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">require &quot;yaml&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">def all_repo_list(yaml)</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">return yaml.keys.join(&quot; &quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">end</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">def all_cookbook_dirs(yaml)</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">all_dir_for(yaml, &quot;cookbook&quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">end</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">def all_pom_dirs(yaml)</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">all_dir_for(yaml, &quot;pom&quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">end</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">def all_test_kitchen_dirs(yaml)</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">all_dir_for(yaml, &quot;test_kitchen&quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">end</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">def all_dir_for(yaml, type)</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">dirs = []</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">yaml.each do |k, v|</span>
</span><span class='line'><span class="err">        </span><span class="l-Scalar-Plain">next if v.nil? || v[type].nil?</span>
</span><span class='line'><span class="err">        </span><span class="l-Scalar-Plain">subfolder = v[type]</span>
</span><span class='line'><span class="err">        </span><span class="l-Scalar-Plain">dirs &lt;&lt; &quot;#{k}#{subfolder}&quot;</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">end</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">dirs.join(&quot; &quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">end</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">current_dir = File.dirname(__FILE__)</span>
</span><span class='line'><span class="l-Scalar-Plain">yaml = YAML.load_file(&quot;#{current_dir}/config.yml&quot;)</span>
</span><span class='line'><span class="l-Scalar-Plain">all_components = yaml[&quot;components&quot;]</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">text = []</span>
</span><span class='line'><span class="l-Scalar-Plain">text &lt;&lt; &quot;export all_repos=\&quot;#{all_repo_list(all_components)}\&quot;&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">text &lt;&lt; &quot;export all_cookbook_dirs=\&quot;#{all_cookbook_dirs(all_components)}\&quot;&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">text &lt;&lt; &quot;export all_pom_dirs=\&quot;#{all_pom_dirs(all_components)}\&quot;&quot;</span>
</span><span class='line'><span class="l-Scalar-Plain">text &lt;&lt; &quot;export all_test_kitchen_dirs=\&quot;#{all_test_kitchen_dirs(all_components)}\&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">File.open(&quot;#{current_dir}/config&quot;, &quot;w&quot;) {|file| file.write(text.join(&quot;\n&quot;)) }</span><span class="err"> </span>
</span></code></pre></td></tr></table></div></figure>


<p>然后在脚本执行前source一下这个生成的文件<strong>config</strong>即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SIP Headers]]></title>
    <link href="http://seanguo.github.io/blog/2017/04/23/sip-headers/"/>
    <updated>2017-04-23T19:45:06+08:00</updated>
    <id>http://seanguo.github.io/blog/2017/04/23/sip-headers</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>SIP协议的设计很多参考了已有的HTTP协议，例如都是用的文本，验证用户相关的header和content-type和body的设计。这里主要说一下SIP独有的这些header，其中对路由相关的header又是重点要说的。</p>

<h2>From和To</h2>

<p>这两个header是作为标识存在的，对协议本身的路由来说不起什么作用。在实际电话呼叫中会标识主叫方和被叫方。其中的tag参数被选用来标识session。除了这两个tag参数外，session的标识还要用到另外一个header： Call-ID的值。下面是<a href="https://tools.ietf.org/html/rfc3261">RFC3261</a>里面的一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>From: "Bob" &lt;sips:bob@biloxi.com> ;tag=a48s
</span><span class='line'>From: sip:+12125551212@phone2net.com;tag=887s
</span><span class='line'>From: Anonymous &lt;sip:c8oqz84zk7z@privacy.org>;tag=hyh8
</span><span class='line'>
</span><span class='line'>To: Carol &lt;sip:carol@chicago.com></span></code></pre></td></tr></table></div></figure>


<p>可以看到这两个header里可以包含一个用来描述这个URI的display name。在呼叫中这个就会用来标识呼叫的主被叫的名字。</p>

<p>From和To在一侧的请求和响应里是一致的，但是和呼叫另一侧发过来的请求是相反的。</p>

<h2>Contact</h2>

<p>这个header用来标识session内这个UA期望对方request发送到的地址。在一个Invite发起的session中，一般会包含在Invite和对应的响应里。它所表示的地址就是session内ACK，Bye，re-Invite等发送到这个UA的地址。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Contact: &lt;sip:pc33.atlanta.com></span></code></pre></td></tr></table></div></figure>


<h2>Via</h2>

<p>上面讲的Contact是为request指示地址，而Via是为request对应的response来指示地址的。它是在request被发送的时候添加的，而对方收到请求之后会把响应发给这个header标示的地址。如果涉及到NAT或者防火墙之类的，这个发送方添加的地址和接收方收到的源地址不同的情况。这种情况下协议添加了个received的参数来标示实际收到的request是从哪发来的。这样保证了response能原路发送回request发送方。RFC3261中介绍了这种情况下的一个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INVITE sip:bob@Biloxi.com SIP/2.0
</span><span class='line'>Via: SIP/2.0/UDP bobspc.biloxi.com:5060</span></code></pre></td></tr></table></div></figure>


<p>这个request的接收方发现它的源地址是和via里面的地址不一样的，所以就在里面加上了received参数来标示实际的源地址：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INVITE sip:bob@Biloxi.com SIP/2.0
</span><span class='line'>Via: SIP/2.0/UDP bobspc.biloxi.com:5060;received=192.0.2.4</span></code></pre></td></tr></table></div></figure>


<p>Via里面还有个重要的参数branch来标示这个request对应的transaction。</p>

<h2>Request-Uri</h2>

<p>这个准确来说不是一个header，因为它是request第一行里请求类型后面的URI。它是用来标识请求要发向的地址的，因为我们前面说了To header不决定路由。</p>

<h2>Route和Record-Route</h2>

<p>在没有Proxy的情况下只要一个Request-Uri就能把request路由到目的地了，但是实际情况是request总要经过一些Proxy来达到目的地。所以我们还要用Route来标示请求中间经过的节点。当Proxy收到请求后发现top Route是自己的地址就会去掉转发给下一个目的地。如果这个Proxy配置成Record Route的，就会在请求中加入Record-Route这个header，这个header的加入就表示session内的其他请求也会经过这个节点。所以Record-Route是保存在session内的状态，它和Contact共同决定了session内请求的路由路径。</p>

<figure class='code'><figcaption><span>Simple Proxy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>+---------+              +-----------+              +-----------+
</span><span class='line'>|         |              |           |              |           |
</span><span class='line'>|UA-Caller|              |  Proxy    |              | UA-Callee |
</span><span class='line'>+----+----+              +-----+-----+              +-----+-----+
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     +------------------------->                          |
</span><span class='line'>     |INVITE sip:callee@192.168.1.7                       |
</span><span class='line'>     |Route: sip:192.168.1.5                              |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         +-------------------------->
</span><span class='line'>     |                         |    INVITE sip:callee@192.168.1.7
</span><span class='line'>     |                         |    Record-Route: sip:192.168.1.5
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         &lt;--------------------------+
</span><span class='line'>     |                         |   SIP/2.0 200 OK         |
</span><span class='line'>     |                         |   Record-Route: sip:192.168.1.5
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     &lt;-------------------------+                          |
</span><span class='line'>     |   SIP/2.0 200OK         |                          |
</span><span class='line'>     |   Record-Route: sip:192.168.1.5                    |
</span><span class='line'>     |                         +                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     +------------------------->                          |
</span><span class='line'>     |   BYE sip:callee@192.168.1.5                       |
</span><span class='line'>     |   Route: sip:192.168.1.5|                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         +-------------------------->
</span><span class='line'>     |                         |   BYE sip:callee@192.168.1.5
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     |                         |                          |
</span><span class='line'>     +                         +                          +</span></code></pre></td></tr></table></div></figure>


<p>这里的Record-Route通过INVITE传给了UA-Callee，并通过200OK返回给了UA-Caller，保证了后续的BYE（UA-Callee发起的也是一样）必须经过Proxy才能到对方。</p>

<p>如果request需要经过多个Proxy，就有可能会有多个Record-Route。这个Record-Route的添加也是按顺序添加到request里的，这样保证消息能够按初始request的路径来路由。</p>

<p>如果这个Proxy正好部署在网络边界上（多网卡机器），有可能UA-Caller这侧是一个网段而UA-Callee成了另一个网段，或者两侧使用的transport不同。这样由于Record-Route是共享给两侧使用的，这就会造成一侧的消息发不到Proxy。因为Record-Route没有像Via那样可以加个received的参数来揭示源地址。</p>

<p><a href="https://tools.ietf.org/html/rfc5658">RFC5658</a>通过添加两个Record-Route来巧妙的解决了这个问题。可以直接参考那个RFC里面的这个例子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   UA1              Proxy "P1"               UA2
</span><span class='line'>  (IPv4)            (IPv4/IPv6)             (IPv6)
</span><span class='line'>    |                    |                    |
</span><span class='line'>    |   F1 INVITE        |                    |
</span><span class='line'>    |-------------------&gt;|      F2 INVITE     |
</span><span class='line'>    |                    |-------------------&gt;|
</span><span class='line'>    |    100 Trying      |                    |
</span><span class='line'>    |&lt;-------------------|                    |
</span><span class='line'>    |                    |    F3 200 OK       |
</span><span class='line'>    |    F4 200 OK       |&lt;-------------------|
</span><span class='line'>    |&lt;-------------------|                    |
</span><span class='line'>    |                    |                    |
</span><span class='line'>    |       F5 ACK       |                    |
</span><span class='line'>    |-------------------&gt;|       F6 ACK       |
</span><span class='line'>    |                    |-------------------&gt;|
</span><span class='line'>    |                    |                    |
</span><span class='line'>    |                    |        F7 BYE      |
</span><span class='line'>    |       F8 BYE       |&lt;-------------------|
</span><span class='line'>    |&lt;-------------------|                    |
</span><span class='line'>
</span><span class='line'>        Figure 2: IPv4 to IPv6 Multi-Homed Proxy Illustration
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>   F1 INVITE UA1 -&gt; P1 (192.0.2.254:5060)
</span><span class='line'>
</span><span class='line'>   INVITE sip:bob@biloxi.example.com SIP/2.0
</span><span class='line'>   Route: &lt;sip:192.0.2.254:5060;lr&gt;
</span><span class='line'>   From: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>   To: Bob &lt;sip:bob@biloxi.example.com&gt;
</span><span class='line'>   Contact: &lt;sip:alice@192.0.2.1&gt;
</span><span class='line'>
</span><span class='line'>       F2 INVITE P1 (2001:db8::1) -&gt; UA2
</span><span class='line'>
</span><span class='line'>       INVITE sip:bob@biloxi.example.com SIP/2.0
</span><span class='line'>       Record-Route: &lt;sip:[2001:db8::1];lr&gt;
</span><span class='line'>       Record-Route: &lt;sip:192.0.2.254:5060;lr&gt;
</span><span class='line'>       From: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>       To: Bob &lt;sip:bob@biloxi.example.com&gt;
</span><span class='line'>       Contact: &lt;sip:alice@192.0.2.1&gt;
</span><span class='line'>
</span><span class='line'>               Dialog State at UA2:
</span><span class='line'>               Local URI     = sip:bob@biloxi.example.com
</span><span class='line'>               Remote URI    = sip:alice@atlanta.example.com
</span><span class='line'>               Remote target = sip:alice@192.0.2.1
</span><span class='line'>               Route Set     = sip:[2001:db8::1];lr
</span><span class='line'>                               sip:192.0.2.254:5060:lr
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>               F3 200 OK UA2 -&gt; P1 (2001:db8::1)
</span><span class='line'>
</span><span class='line'>               SIP/2.0 200 OK
</span><span class='line'>               Record-Route: &lt;sip:[2001:db8::1];lr&gt;
</span><span class='line'>               Record-Route: &lt;sip:192.0.2.254:5060;lr&gt;
</span><span class='line'>               From: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>               To: Bob &lt;sip:bob@biloxi.example.com&gt;;tag=4567
</span><span class='line'>               Contact: &lt;sip:bob@[2001:db8::33]&gt;
</span><span class='line'>
</span><span class='line'>       F4 200 OK P1 -&gt; UA1
</span><span class='line'>
</span><span class='line'>       SIP/2.0 200 OK
</span><span class='line'>       Record-Route: &lt;sip:[2001:db8::1];lr&gt;
</span><span class='line'>       Record-Route: &lt;sip:192.0.2.254:5060;lr&gt;
</span><span class='line'>       From: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>       To: Bob &lt;sip:bob@biloxi.example.com&gt;;tag=4567
</span><span class='line'>       Contact: &lt;sip:bob@[2001:db8::33]&gt;
</span><span class='line'>
</span><span class='line'>   Dialog State at UA1:
</span><span class='line'>   Local URI     = sip:alice@atlanta.example.com
</span><span class='line'>   Remote URI    = sip:bob@biloxi.example.com
</span><span class='line'>   Remote target = sip:bob@[2001:db8::33]
</span><span class='line'>   Route Set     = sip:192.0.2.254:5060:lr
</span><span class='line'>               sip:[2001:db8::1];lr
</span><span class='line'>
</span><span class='line'>   F5 ACK UA1 -&gt; P1 (192.0.2.254:5060)
</span><span class='line'>
</span><span class='line'>   ACK sip:bob@[2001:db8::33] SIP/2.0
</span><span class='line'>   Route: &lt;sip:192.0.2.254:5060:lr&gt;
</span><span class='line'>   Route: &lt;sip:[2001:db8::1];lr&gt;
</span><span class='line'>   From: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>   To: Bob &lt;sip:bob@biloxi.example.com&gt;;tag=4567
</span><span class='line'>
</span><span class='line'>       F6 ACK P1 (2001:db8::1) -&gt; UA2
</span><span class='line'>
</span><span class='line'>       ACK sip:bob@[2001:db8::33] SIP/2.0
</span><span class='line'>       From: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>       To: Bob &lt;sip:bob@biloxi.example.com&gt;;tag=4567
</span><span class='line'>       (both Route headers have been removed by the proxy)
</span><span class='line'>
</span><span class='line'>               F7 BYE UA2 -&gt; P1 (2001:db8::1)
</span><span class='line'>
</span><span class='line'>               BYE sip:alice@192.0.2.1 SIP/2.0
</span><span class='line'>               Route: &lt;sip:[2001:db8::1];lr&gt;
</span><span class='line'>               Route: &lt;sip:192.0.2.254:5060:lr&gt;
</span><span class='line'>               From: Bob &lt;sip:bob@biloxi.example.com&gt;;tag=4567
</span><span class='line'>               To: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>       F8 BYE P1 (192.0.2.254:5060) -&gt; UA1
</span><span class='line'>
</span><span class='line'>       BYE sip:alice@192.0.2.1 SIP/2.0
</span><span class='line'>       From: Bob &lt;sip:bob@biloxi.example.com&gt;;tag=4567
</span><span class='line'>       To: Alice &lt;sip:alice@atlanta.example.com&gt;;tag=1234
</span></code></pre></td></tr></table></div></figure>


<p>里面是用的ipv4和ipv6举的例子，不同网段或者transport的是类似的。</p>

<h2>CSeq</h2>

<p>这个表示了会话(session)内的消息的顺序，呼叫两侧的CSeq号是分别维护的。</p>

<p>好了这篇到这告一段落了。其他的header比较简单了，可以查看RFC得到明确的意义。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant+Chef]]></title>
    <link href="http://seanguo.github.io/blog/2017/03/12/vagrant-plus-chef/"/>
    <updated>2017-03-12T19:32:51+08:00</updated>
    <id>http://seanguo.github.io/blog/2017/03/12/vagrant-plus-chef</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>前面我介绍了Chef的环境搭建和简单的cookbook的创建执行，也介绍了如果用Vagrant来快速搭建一台虚拟机。但是所有的东西都停留在hello world的阶段，这篇文章就是结合这两个生产力工具来搭建一组<del>可以实际使用</del>用来做rails开发的server。</p>

<h2>Chef Provisioning</h2>

<p>我们知道Vagrant包含多种不同类型的provisioner，而Chef就是其中内置的一种，所以我们是可以直接使用的。这里我们用到的是chef_solo, Chef Solo是Chef Client的单机版，运行不依赖于Chef Server。</p>

<p>第一步我们要下载我们需要安装的组件的cookbook，这里我们会用到第三方的cookbook，因为在<a href="https://supermarket.chef.io/cookbooks/">社区</a>里已经有很多成熟的cookbook了。但是手工下载的方式不太方便，这里我们用到cookbook的依赖管理的工具: <a href="https://docs.chef.io/berkshelf.html">Berkshelf</a>。它和Ruby的gem管理文件Gemfile语法类似，它的配置文件是Berksfile。我们在当前文件夹（我这里是<strong>vagrant_test</strong>）创建一个空的Berksfile。chef-dk里面已经包含Berkshelf的命令行工具了，对应的命令是<strong>berks</strong>, 但是Vagrant想要用Berkshelf的时候我们还要装个插件来实现，可以用下面的命令来安装最新Berkshelf的插件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant plugin install vagrant-berkshelf
</span></code></pre></td></tr></table></div></figure>


<p>然后编辑Berksfile加上如下两行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://supermarket.chef.io&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9.2&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>source语句指定了去supermarket.chef.io搜索下载cookbook, 第二行声明我们依赖于一个叫rails的cookbook，version为0.9.2，关于version的语法可以<a href="https://docs.chef.io/config_rb_metadata.html#cookbook-version-constraints">戳这里</a>。</p>

<p>我们接着创建一个新的Vagrantfile, 这里我们打算创建两个虚拟机，一个作为rails的主server，另一个用来安装mysql。我们先看第一台虚拟机的配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#base box for all machines</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;bento/centos-6.7&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#define a VM named rails</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;rails&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">rails</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rails</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">override</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">name</span>           <span class="o">=</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'>      <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.50.20&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#configure chef provisoning per VM</span>
</span><span class='line'>    <span class="n">rails</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;yum -y groupinstall &#39;Development Tools&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rails</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;chef_solo&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">node_name</span> <span class="o">=</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="ss">:debug</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;run_list&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;rails&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后我们启动这台rails虚拟机，多虚拟机配置的启动需要指定虚拟机的名字，要不就是默认全部启动。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant up rails
</span></code></pre></td></tr></table></div></figure>


<p>这块儿由于是第一次启动这个虚拟机，它会首先下载需要的cookbook，然后映射到虚拟机里，启动虚拟机之后会首先下载安装Chef，这个过程很耗时间。</p>

<p>这里定义了两个provisioning，一个是用sh安装Rails依赖的开发工具包。另一个是利用rails这个cookbook来配置Rails的环境。
我这块遇到了在墙内会超时的问题。科学上网后解决了但是还是很耗时间，主要是下载Chef的安装包费时间。我们可以在其装好了chef和dev tools之后把这个box存起来作为以后的base box。命令如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant package --base rails
</span><span class='line'>vagrant box add mybase package.box
</span></code></pre></td></tr></table></div></figure>


<p>安装完box之后可以用下面的命令查看是否安装成功:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant box list
</span><span class='line'>bento/centos-6.7 <span class="o">(</span>virtualbox, 2.2.7<span class="o">)</span>
</span><span class='line'>mybase           <span class="o">(</span>virtualbox, 0<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>以后就可以用mybase作为box的name来复用已经下载安装好Chef和dev tools的box。</p>

<p>安装成功后我们可以用如下命令登录进去:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh rails
</span></code></pre></td></tr></table></div></figure>


<p>然后我们定义另外一个虚拟机用来安装mysql，这里我们取名为mysql:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;mysql&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">mysql</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mysql</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">override</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">name</span>           <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>
</span><span class='line'>      <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.50.21&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mysql</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;chef_solo&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">node_name</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="ss">:debug</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;run_list&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;vagrant_chef::mysql&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为对这个cookbook的调用不能直接通过runlist，需要在recipe里调用它的resource来进行，我们需要把当前目录变成一个cookbook。一个cookbook的最小因素就是一个用来自描述的metadata.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">name</span>             <span class="s2">&quot;vagrant_chef&quot;</span>
</span><span class='line'><span class="n">maintainer</span>       <span class="s2">&quot;YOUR_NAME&quot;</span>
</span><span class='line'><span class="n">maintainer_email</span> <span class="s2">&quot;YOUR_EMAIL&quot;</span>
</span><span class='line'><span class="n">license</span>          <span class="s2">&quot;All rights reserved&quot;</span>
</span><span class='line'><span class="n">description</span>      <span class="s2">&quot;Installs/Configures mysql server&quot;</span>
</span><span class='line'><span class="n">version</span>          <span class="s2">&quot;0.0.1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">depends</span> <span class="s2">&quot;mysql&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里我们还要加上对mysql的依赖，只有这样才能保证使用mysql的resource之前对mysql的依赖都全部被加载好。然后我们需要在Berksfile里指定mysql的cookbook版本，这样Berkshelf插件才会把这个新依赖的cookbook抓下来:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://supermarket.chef.io&#39;</span>
</span><span class='line'><span class="n">metadata</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.9.2&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;mysql&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 8.2.0&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们还加上了一行metadata，表示我们解析当前目录的metadata.rb, 把当前这个cookbook也加载进来。然后我们创建一个receipes文件夹，创建一个mysql.rb:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mysql_service</span> <span class="s1">&#39;mysql&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">port</span> <span class="s1">&#39;3306&#39;</span>
</span><span class='line'>  <span class="n">version</span> <span class="s1">&#39;5.5&#39;</span>
</span><span class='line'>  <span class="n">initial_root_password</span> <span class="s1">&#39;change me&#39;</span>
</span><span class='line'>  <span class="n">action</span> <span class="o">[</span><span class="ss">:create</span><span class="p">,</span> <span class="ss">:start</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个Recipe用来安装设置mysql， 可以看到上面我们中对虚拟机的provisioning的配置里可以通过把<strong>vagrant_chef::mysql</strong>加到runlist来实现对这个Recipe的调用。
所有都做好我们可以调用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant up mysql
</span></code></pre></td></tr></table></div></figure>


<p>这样mysql这个虚拟机也会被创建设置好。</p>

<p>本来就想写个vagrant+chef的教程，结果大部分时间花在调试这两个别人写的cookbook。终于还是放弃了，所以这个教程的Chef安装部分是跑不起来的，仅供参考。但是其中你也能学到多个虚拟机的配置，组网，如何在Vagrant使用Chef, Berkshelf这些东西。</p>

<p>完整的Vagrantfile如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="s2">&quot;2&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#base box for all machines</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;bento/centos-6.7&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">#define a VM named rails</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;rails&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">rails</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rails</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">override</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">name</span>           <span class="o">=</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'>      <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.50.20&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#configure chef provisoning per VM</span>
</span><span class='line'>    <span class="n">rails</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="s2">&quot;yum -y groupinstall &#39;Development Tools&#39;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rails</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;chef_solo&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">node_name</span> <span class="o">=</span> <span class="s2">&quot;rails&quot;</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="ss">:debug</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;run_list&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;rails&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">define</span> <span class="s2">&quot;mysql&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">mysql</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mysql</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">v</span><span class="p">,</span> <span class="n">override</span><span class="o">|</span>
</span><span class='line'>      <span class="n">v</span><span class="o">.</span><span class="n">name</span>           <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>
</span><span class='line'>      <span class="n">override</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="ss">:private_network</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.50.21&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mysql</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;chef_solo&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">chef</span><span class="o">|</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">node_name</span> <span class="o">=</span> <span class="s2">&quot;mysql&quot;</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">log_level</span> <span class="o">=</span> <span class="ss">:debug</span>
</span><span class='line'>      <span class="n">chef</span><span class="o">.</span><span class="n">json</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;run_list&quot;</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="s2">&quot;vagrant_chef::mysql&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chef 介绍 Part1 Setup]]></title>
    <link href="http://seanguo.github.io/blog/2017/02/17/chefjie-shao/"/>
    <updated>2017-02-17T20:20:59+08:00</updated>
    <id>http://seanguo.github.io/blog/2017/02/17/chefjie-shao</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>Chef是一个自动化部署的工具。它的思想是“Infrastructure as code”, 所以整个DevOps流程下来都是代码，都可以保存在代码仓库里面。像Chef之类的工具出现之前，简单部署的话就是手工来了，像Java的web应用手工部署个War包或者改个配置文件什么的，高级点的可能会写个shell脚本来自动化。但是当需要管理的机器增多或者配置项增多，或者不同的机器要求不一样的配置的话，就力不从心了。Chef出现之后，这样的难题就迎刃而解了。</p>

<p>Chef的实现是用的Ruby，所以它的配置脚本也是基于Ruby的, 所以想要学好Chef也需要了解一下Ruby的基本语法，如果想要扩展，定制，增加自己的Chef库的话，还是需要仔细学习一下Ruby才行。这导致Chef陡峭的学习曲线，了解个皮毛很容易，但是想要深入了解，诊断问题的话需要做很多功课才可以。</p>

<p>想要学好，我们先搭环境，在应用中学习是最有成效的。</p>

<h2>安装</h2>

<p>Chef安装很简单，就去下载一个叫做<a href="https://downloads.chef.io/">Chef DK</a>的包安装就可以了。这个会把Chef全家桶装好，里面开发测试用的所有工具都包含了。</p>

<p>安装完后可以运行下面的命令检查一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>➜  ~ chef-solo -v
</span><span class='line'>Chef: 12.17.44
</span></code></pre></td></tr></table></div></figure>


<h2>第一个程序</h2>

<p>我们可以通过下面的命令来创建我们的第一个Chef程序(它叫Cookbook)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">chef</span> <span class="n">generate</span> <span class="n">cookbook</span> <span class="n">sample1</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是这个cookbook的目录结构:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.
</span><span class='line'>├── Berksfile
</span><span class='line'>├── README.md
</span><span class='line'>├── chefignore
</span><span class='line'>├── metadata.rb
</span><span class='line'>├── recipes
</span><span class='line'>│   └── default.rb
</span><span class='line'>├── spec
</span><span class='line'>│   ├── spec_helper.rb
</span><span class='line'>│   └── unit
</span><span class='line'>│       └── recipes
</span><span class='line'>│           └── default_spec.rb
</span><span class='line'>├── <span class="nb">test</span>
</span><span class='line'>│   └── smoke
</span><span class='line'>│       └── default
</span><span class='line'>│           └── default_test.rb
</span></code></pre></td></tr></table></div></figure>


<p>简单来说Chef的运行是顺序执行一个一个的Resource，Chef在Ruby语法的基础上封装了自己的DSL来把经常用到的命令，配置文件的管理等抽象成一个个的Resource。这些Resource根据需求顺序放在Chef的脚本里（它叫Recipe）就可以执行了。所以Chef的入口是Recipe，下面是一个简单的例子。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="s1">&#39;/tmp/test.txt&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="s1">&#39;This is myfirst sample&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="s1">&#39;0755&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个主代码块我们要放到recipes/default.rb里</p>

<p>像这个file Resource就会在制定的路径创建一个php文件，然后填充文件的内容，设置用户和组，然后还有权限。简单而直观，没有Ruby的背景也能够轻易理解。
要写在本地运行起来，我们还要创建两个文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat ~/.chef/solo.rb
</span><span class='line'>cookbook_path <span class="o">[</span><span class="s1">&#39;~/blog_samples/chef_intro/&#39;</span><span class="o">]</span>%
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat test.json
</span><span class='line'><span class="o">{</span>
</span><span class='line'><span class="s2">&quot;run_list&quot;</span>:<span class="o">[</span><span class="s2">&quot;sample1&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后可以用下面的命令在本地来运行这个cookbook:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chef-solo -j test.json -c ~/.chef/solo.rb
</span></code></pre></td></tr></table></div></figure>


<p>然后我们看到了如下的输出</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Starting Chef Client, version 12.17.44
</span><span class='line'>resolving cookbooks <span class="k">for </span>run list: <span class="o">[</span><span class="s2">&quot;sample1&quot;</span><span class="o">]</span>
</span><span class='line'>Synchronizing Cookbooks:
</span><span class='line'>  - sample1 <span class="o">(</span>0.1.0<span class="o">)</span>
</span><span class='line'>Installing Cookbook Gems:
</span><span class='line'>Compiling Cookbooks...
</span><span class='line'>Converging 1 resources
</span><span class='line'>Recipe: sample1::default
</span><span class='line'>  * file<span class="o">[</span>/tmp/test.txt<span class="o">]</span> action create
</span><span class='line'>    - create new file /tmp/test.txt
</span><span class='line'>    - update content in file /tmp/test.txt from none to ea8447
</span><span class='line'>    --- /tmp/test.txt 2017-02-23 21:20:46.000000000 +0800
</span><span class='line'>    +++ /tmp/.chef-test20170223-2804-c8bnol.txt   2017-02-23 21:20:46.000000000 +0800
</span><span class='line'>    @@ -1 +1,2 @@
</span><span class='line'>    +This is myfirst sample
</span><span class='line'>    - change mode from <span class="s1">&#39;&#39;</span> to <span class="s1">&#39;0755&#39;</span>
</span><span class='line'>
</span><span class='line'>Running handlers:
</span><span class='line'>Running handlers <span class="nb">complete</span>
</span><span class='line'>Chef Client finished, 1/1 resources updated in 12 seconds
</span></code></pre></td></tr></table></div></figure>


<p>这表示成功执行完了，可以到那个地方检查一下这个文件是否被创建了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /tmp/test.txt
</span><span class='line'>This is myfirst sample
</span></code></pre></td></tr></table></div></figure>


<p>到这之后然后可能会想要修改文件的mode， 这可以通过Attribute来实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">file</span> <span class="s1">&#39;/tmp/test.txt&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">content</span> <span class="s1">&#39;This is myfirst sample&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;chef_intro&#39;</span><span class="o">][</span><span class="s1">&#39;sample1&#39;</span><span class="o">][</span><span class="s1">&#39;file_mode&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些Attribute是在另一个Ruby文件（attributes/default.rb）定义的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">default</span><span class="o">[</span><span class="s1">&#39;chef_intro&#39;</span><span class="o">][</span><span class="s1">&#39;sample1&#39;</span><span class="o">][</span><span class="s1">&#39;file_mode&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;755&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后修改我们的用户配置test.json为:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">{</span>
</span><span class='line'>  <span class="s2">&quot;run_list&quot;</span>:<span class="o">[</span><span class="s2">&quot;sample1&quot;</span><span class="o">]</span>,
</span><span class='line'>  <span class="s2">&quot;chef_intro&quot;</span>: <span class="o">{</span>
</span><span class='line'>      <span class="s2">&quot;sample1&quot;</span>: <span class="o">{</span>
</span><span class='line'>          <span class="s2">&quot;file_mode&quot;</span>: <span class="s2">&quot;644&quot;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p> 再次运行这个cookbook可以看到输出已经把文件的mode改成644了，通过这种方式我们就可以通过从外面的配置覆盖cookbook的默认值，达到定制化配置的目的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> Recipe: sample1::default
</span><span class='line'>  * file<span class="o">[</span>/tmp/test.txt<span class="o">]</span> action create
</span><span class='line'>    - change mode from <span class="s1">&#39;0755&#39;</span> to <span class="s1">&#39;0644&#39;</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何构建黑苹果(Hackintosh)]]></title>
    <link href="http://seanguo.github.io/blog/2017/01/17/ru-he-gou-jian-hei-ping-guo-hackintosh/"/>
    <updated>2017-01-17T20:55:12+08:00</updated>
    <id>http://seanguo.github.io/blog/2017/01/17/ru-he-gou-jian-hei-ping-guo-hackintosh</id>
    <content type="html"><![CDATA[<h2>引言</h2>

<p>上大学的时候就想在PC上装个Mac操作系统来玩玩，因为已经观看了Windows安装的进度条多次，现在想要看看Mac怎么样。记得当时是想在虚拟机里装个Mac系统，但是停留在设置系统的部分，因为系统不能识别鼠标和键盘，只能作罢。
上次的尝试是自己的新PC刚组装好的时候，这次已经掌握了Google，知道了这个东西叫Hackintosh，上各大论坛搜索相关的资料和安装教程，这次再次以失败告终，这次停在了安装时候的crash。
最近晚上又有一些闲工夫，看到了<a href="https://www.tonymacx86.com/">tonyMacX86</a>里居然说已经有我的显卡GTX970的官方驱动了，所以再一次走进这个坑，皇天不负有心人，铁杵终能磨成针，这一次终于安装好了。下面就是这次我的安装历程，不算一个教程，因为那个论坛里的教程已经非常好了。</p>

<h2>安装前</h2>

<p>这个就是我当初跟随的<a href="https://www.tonymacx86.com/threads/unibeast-install-macos-sierra-on-any-supported-intel-based-pc.200564/">教程</a>。它这个也是分为三个阶段来讲述的，需要用到一些工具，这些工具这个论坛也提供了下载，但是要注册登录后才可以。黑苹果的设置安装过程中会用到Mac，所以你手头必须有个Mac才行。</p>

<h3>第一步</h3>

<p>它的第一步是下载这个最新的Mac Sierra系统，我这在公司的Mac上已经下载好了但是由于怕搞坏我本机的开发环境一直没敢升级。默认升级后会问你是不是要删掉这个下载好的安装程序。</p>

<h3>第二步</h3>

<p>创建可以自启动的Mac安装盘，用到的工具是<a href="https://www.tonymacx86.com/resources/unibeast-7-0-1.320/">UniBeast</a>。我在这一步卡壳了一下，因为手头没有16G以上的U盘，打算用手头的移动硬盘来作为启动盘，但是这就出问题了。按说明格式化好后打开UniBeast之后发现不了移动硬盘，google一下原来是新版的UniBeast不支持64GB以上的移动存储。wtf！只能把移动硬盘分区了，这块又有问题，Mac的磁盘工具的Partition按钮不可用，继续google吧，这次找到了Mac下面这个命令来解决：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>diskutil partitionDisk disk2 1 GPT HFS+ newdisk R
</span></code></pre></td></tr></table></div></figure>


<p>这里要注意disk2是你的移动硬盘。
然后下面顺利分了两个区，这个启动的区设为了64GB。然后再次启动UniBeast一路continue安装好了启动盘。</p>

<h3>第三步</h3>

<p>主板的BIOS/UEFI设置，直接找到了论坛里一个我的主板<a href="https://www.tonymacx86.com/threads/tonymacx86s-asus-test-build-z97-a-i3-4340-hd4600-thunderbolt-ex-ii.136796/">阿苏斯Z97-A</a>的配置，把<strong>安全启动</strong>里的<strong>安全模式</strong>改为<strong>其他操作系统</strong>即可。</p>

<h2>安装</h2>

<p>重启按<strong>F8</strong>选择UEFI（和制作启动盘是Unibeast里的mode要要一致）的移动硬盘启动，黑屏白苹果进度条，成功进入安装界面这次没有Kernel Panic之类的错误，然后就是进入<strong>磁盘工具</strong>格式化分区，这块又是一个坑。<strong>磁盘工具</strong>报错没有空间来执行操作，继续google大法发现有人说是苹果的这个磁盘工具要求硬盘上必须有个>=200MB的EFI分区才行，wtf！而用windows分区出来的硬盘是没有那么大的EFI分区或者压根没有（可以用Windows的磁盘管理来查看目标磁盘有没有EFI分区）， 我的属于后者。继续google吧，发现了下面一个救命<a href="https://www.youtube.com/watch?v=Rqico9ENA-4">视频</a>，这个方法保持了不伤数据, 这个视频是在油管发现的，需要翻墙才能看，下面把里面的命令扒下来，具体来说就是没有EFI分区我可以用windows的磁盘工具创建一个出来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>diskpart
</span><span class='line'>list disk
</span><span class='line'>sel disk 1<span class="o">(</span>你的目标磁盘号<span class="o">)</span>
</span><span class='line'>list volumne
</span><span class='line'>sel vol 5（你的目标分区号）
</span><span class='line'>shrink <span class="nv">desired</span><span class="o">=</span>300（压缩这个分区300M来创建EFI分区）
</span><span class='line'>create partition efi <span class="nv">size</span><span class="o">=</span>300
</span><span class='line'>format quick <span class="nv">fs</span><span class="o">=</span>fat32 <span class="nv">Label</span><span class="o">=</span><span class="s2">&quot;System&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>经过这个之后<strong>磁盘工具</strong>终于可以运行了，但是在这块儿我又碰到一个我指定的硬盘分区使用率为100%的问题（实际上是空的），但是有个分区确是好的，这块没有深究，把可用的磁盘中的文件拷贝过去，重启继续了安装在了好的分区。这次是顺利完成了安装，也成功进入了设置界面。</p>

<h2>安装后</h2>

<p>设置完整后该是用<a href="https://www.tonymacx86.com/resources/multibeast-sierra-9-0-1.329/">Multibeast</a>来装驱动了，这块又碰到个不起作用的问题，google来google去都没解决，后来无意中发现这个MultiBeast默认是把设置install到了系统盘，但是我的引导盘应该是叫做<strong>USB</strong>的移动硬盘才对，驱动应该是装在那来才对，修改目标地址为其终于是解决了声卡驱动的问题。<br></p>

<p>然后到了显卡驱动，这块很多问题可以参考这个<a href="https://www.tonymacx86.com/threads/nvidia-releases-alternate-graphics-drivers-for-macos-sierra-10-12-0-367-15-10-05.200843/">帖子</a>。这块我走了很多弯路，导致第一天没有完成这个安装，拖到了第二天晚上。开始是安装好了WebDriver，但是无法切换到Nvdia的驱动，总是用的Mac自带的驱动，这个的现象就是<strong>关于</strong>里面显示显卡的显存为0MB。google了一圈然后又回来了tonyMacX86论坛扫帖子，有人说是Inject Nvdia应该从Clover的配置里去掉。这块改Clover的配置又是琢磨了半天。下载了个Clover Configurator用里面的Mount EFI分区后才能发现这个配置文件。 去掉Inject Nvdia然后把webDriver设成true还是不行。这次现象是Nvdia控制面板显示驱动已经勾上了，但是关于里没有正确识别显卡型号，说是Nvdia Model 5MB，具体记不太清了，继续google，搜论坛吧，有的说是Inject了Intel的显卡驱动，看了看没有，有的说打开webdriver后应该吧Clover的启动名利里去掉nv_disable=1，这块我栽了个大跟头，我把1改成了0，还是不行，浪费了很多时间，最后终于想起把nv_disable=0整个去掉试试，哪知道居然成功了。终于是大功告成了，赶紧发了个朋友圈庆祝了一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant 入门]]></title>
    <link href="http://seanguo.github.io/blog/2016/11/16/vagrant-ru-men/"/>
    <updated>2016-11-16T11:48:43+08:00</updated>
    <id>http://seanguo.github.io/blog/2016/11/16/vagrant-ru-men</id>
    <content type="html"><![CDATA[<h2>介绍</h2>

<p>Vagrant是一个虚拟机管理工具，通过它你可以用几个简单的命令快速搭建一个配置好的虚拟机环境。它提供了多种虚拟机provider所以你可以用同一个设置文件去驱动设置不同的虚拟机。<br><br>
它的核心文件叫做Vagrantfile，所有的虚拟机的配置都是在这里。我们可以在里面定义各个provider的配置，如果去用provisioner去设置虚拟机，安装应用程序。有了这个配置文件，你就可以很方便的快速重复构建一个测试环境。这让Docker出现之前成为了开发员很热衷的一个环境设置工具。
我这篇文章将会一步一步来搭建一个测试环境。这样从头来讲解Vagrant的基本使用方法，希望可以帮到那些想要学习Vagrant的人。</p>

<h2>初始设置</h2>

<p>首先你需要去<a href="https://www.vagrantup.com/downloads.html">下载</a>适合你操作系统的Vagrant安装包。安装完之后我们还需要安装<a href="https://www.virtualbox.org/">VirtualBox</a>来作为演示用的provider。因为Virtualbox是Vagrant的provider，当然当你熟悉Vagrant之后可以通过修改全局的配置文件来修改默认的provider。一切都安装好了之后我们需要打开一个shell窗口，新建一个文件夹作为这次演示用的。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir vagrant_leanring
</span><span class='line'><span class="nb">cd </span>vagrant_leanring
</span><span class='line'>vagrant init
</span></code></pre></td></tr></table></div></figure>


<p>这里用到了第一个命令 <em>vagrant init</em> 这个命令会在当然目录生成如下这样的一个Vagrantfile，我们可以以这个为模板来修改运行我们自己的演示。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># All Vagrant configuration is done below. The &quot;2&quot; in Vagrant.configure</span>
</span><span class='line'><span class="c1"># configures the configuration version (we support older styles for</span>
</span><span class='line'><span class="c1"># backwards compatibility). Please don&#39;t change it unless you know what</span>
</span><span class='line'><span class="c1"># you&#39;re doing.</span>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># The most common configuration options are documented and commented below.</span>
</span><span class='line'>  <span class="c1"># For a complete reference, please see the online documentation at</span>
</span><span class='line'>  <span class="c1"># https://docs.vagrantup.com.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Every Vagrant development environment requires a box. You can search for</span>
</span><span class='line'>  <span class="c1"># boxes at https://atlas.hashicorp.com/search.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;base&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Disable automatic box update checking. If you disable this, then</span>
</span><span class='line'>  <span class="c1"># boxes will only be checked for updates when the user runs</span>
</span><span class='line'>  <span class="c1"># `vagrant box outdated`. This is not recommended.</span>
</span><span class='line'>  <span class="c1"># config.vm.box_check_update = false</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a forwarded port mapping which allows access to a specific port</span>
</span><span class='line'>  <span class="c1"># within the machine from a port on the host machine. In the example below,</span>
</span><span class='line'>  <span class="c1"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span>
</span><span class='line'>  <span class="c1"># config.vm.network &quot;forwarded_port&quot;, guest: 80, host: 8080</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a private network, which allows host-only access to the machine</span>
</span><span class='line'>  <span class="c1"># using a specific IP.</span>
</span><span class='line'>  <span class="c1"># config.vm.network &quot;private_network&quot;, ip: &quot;192.168.33.10&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a public network, which generally matched to bridged network.</span>
</span><span class='line'>  <span class="c1"># Bridged networks make the machine appear as another physical device on</span>
</span><span class='line'>  <span class="c1"># your network.</span>
</span><span class='line'>  <span class="c1"># config.vm.network &quot;public_network&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Share an additional folder to the guest VM. The first argument is</span>
</span><span class='line'>  <span class="c1"># the path on the host to the actual folder. The second argument is</span>
</span><span class='line'>  <span class="c1"># the path on the guest to mount the folder. And the optional third</span>
</span><span class='line'>  <span class="c1"># argument is a set of non-required options.</span>
</span><span class='line'>  <span class="c1"># config.vm.synced_folder &quot;../data&quot;, &quot;/vagrant_data&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provider-specific configuration so you can fine-tune various</span>
</span><span class='line'>  <span class="c1"># backing providers for Vagrant. These expose provider-specific options.</span>
</span><span class='line'>  <span class="c1"># Example for VirtualBox:</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># config.vm.provider &quot;virtualbox&quot; do |vb|</span>
</span><span class='line'>  <span class="c1">#   # Display the VirtualBox GUI when booting the machine</span>
</span><span class='line'>  <span class="c1">#   vb.gui = true</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1">#   # Customize the amount of memory on the VM:</span>
</span><span class='line'>  <span class="c1">#   vb.memory = &quot;1024&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># View the documentation for the provider you are using for more</span>
</span><span class='line'>  <span class="c1"># information on available options.</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Define a Vagrant Push strategy for pushing to Atlas. Other push strategies</span>
</span><span class='line'>  <span class="c1"># such as FTP and Heroku are also available. See the documentation at</span>
</span><span class='line'>  <span class="c1"># https://docs.vagrantup.com/v2/push/atlas.html for more information.</span>
</span><span class='line'>  <span class="c1"># config.push.define &quot;atlas&quot; do |push|</span>
</span><span class='line'>  <span class="c1">#   push.app = &quot;YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME&quot;</span>
</span><span class='line'>  <span class="c1"># end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with a shell script. Additional provisioners such as</span>
</span><span class='line'>  <span class="c1"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span>
</span><span class='line'>  <span class="c1"># documentation for more information about their specific syntax and use.</span>
</span><span class='line'>  <span class="c1"># config.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</span>
</span><span class='line'>  <span class="c1">#   sudo apt-get update</span>
</span><span class='line'>  <span class="c1">#   sudo apt-get install -y apache2</span>
</span><span class='line'>  <span class="c1"># SHELL</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到里面有一些很好的注释来帮助我们快速的生成自己需要的配置。这里能看到这个文件的格式是Ruby语法的，因为Vagrant这个工具是用Ruby来实现，所以为了更好的了解这个配置文件我们会在下一章讲解一下基本的Ruby语法。因为Ruby也是学习Chef需要的语言，我会在下一篇blog里讲解一下基础的Chef知识。</p>

<h2>Vagrant需要了解的Ruby语法</h2>

<p>我们通过上面的Vagrantfile看到Ruby里面的注释是用<em>#</em>来开始的。然后我们看到了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个其实是调用了Vagrant这个mudule上的configure方法，这个方法接受两个参数：第一个参数是2（表示Version），第二个参数是一个代码块(block)，因为根据Ruby的语法, 方法最后一个参数为block的时候我们可以放到括号外面，这种调用也等价于</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是block的两种表示方法，通过这种block的形式我们可以很方便的把一段代码作为参数传给一个方法。这里这个方法的作用就是去设置Vagrant的各项参数。我们可以看到被注释的代码里面也很多再次用到了嵌套的block的方式。<br><br>
需要更多的了解Ruby这门语言的话，这里有个很好的学习Ruby的<a href="http://ruby-doc.com/docs/ProgrammingRuby/">网站</a>，虽然是英文的但是值得一读。</p>

<h2>Box</h2>

<p>现在block的配置里唯一打开注释的就是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;base&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Box是你的虚拟机启动时用的base image,所以你就不必从头去设置一个虚拟机。你可以去社区下载已经基本配置好的Box，然后基于它去搭建虚拟机。你可以去<a href="https://atlas.hashicorp.com/boxes/search">HashiCorp&rsquo;s Atlas box catalog</a>去查看社区已有的Box。这个<em>base</em>就是其中一个Box，<em>base</em>是这个Box的id。我们可以用下面的命令去添加一个Box到我们的本地环境中：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant box add hashicorp/precise32
</span></code></pre></td></tr></table></div></figure>


<p>如果你用的OS是Mac的话，默认下载好的Box会被安装在<em>~/.vagrant.d/boxes</em>。然后我们修改Vagrantfile使用我们导入好的Box，因为base目前是不存在的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/precise32&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Commands</h2>

<ul>
<li><em>vagrant up</em> 是启动一个虚拟机，默认的话会在Virtualbox里导入你指定的Box，然后启动。</li>
</ul>


<p>如果这时候你没有用<em>vagrant box add</em>导入Box的话，这时候Vagrant也会自动下载导入对于的Box。这个命令成功执行完毕之后你会在VirtualBox看到多了一个虚拟机。这个虚拟机的名字是<em>vagrant_learning_default_xxxxxx_xxx</em>。虚拟机名字的前面可以看出来是文件夹的名字，后面的default表示是默认的虚拟机因为一个Vagrantfile可以配置多个虚拟机，这个后面我们会看到。<br>
启动好了之后我们可以用<em>vagrant ssh</em>直接进到机器里。
与up相对应的命令有<br></p>

<ul>
<li><em>vagrant destroy</em> 销毁删除一个创建好的虚拟机。一般我们彻底不用的时候才会这样做，更常用的</li>
<li><em>vagrant halt</em> 关闭一个虚拟机，就是把虚拟机关机，这样的话就不会占用Cpu和内存。</li>
</ul>


<p>还有不太常用的命令像 <em>vagrant suspend/resume</em>是挂起或者恢复虚拟机。更多的可以参考官方文档。</p>

<h2>Provider</h2>

<p>Provider是Vagrant用来和不同种类虚拟机通信的驱动，我们在一个Vagrantfile可以配置多种Provider。安装好Vagrant好默认的Provider就是VirtualBox，所以我们在执行命令时不用传入Provider的名字。实际情况下我们有可能在一个Vagrantfile配置多个Provider来应对开发测试的不同阶段，例如我们可以配置一个VirtualBox的Provider做本地开发/测试，然后再定义一个EC2的Provider来部署到Amazon的云里，这样的配置就像下面这样:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># Display the VirtualBox GUI when booting the machine</span>
</span><span class='line'>  <span class="n">vb</span><span class="o">.</span><span class="n">gui</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Customize the amount of memory on the VM:</span>
</span><span class='line'>  <span class="n">vb</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="s2">&quot;1024&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Configure the virtual machine name displayed in VirtualBox</span>
</span><span class='line'>  <span class="n">vb</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;vagrant_leanring&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:aws</span> <span class="k">do</span> <span class="o">|</span><span class="n">aws</span><span class="p">,</span><span class="n">overide</span><span class="o">|</span>
</span><span class='line'>    <span class="n">aws</span><span class="o">.</span><span class="n">security_groups</span>           <span class="o">=</span>  <span class="sx">%w(everything_open)</span>
</span><span class='line'>    <span class="n">aws</span><span class="o">.</span><span class="n">access_key_id</span>             <span class="o">=</span>  <span class="s2">&quot;YOUR KEY&quot;</span>
</span><span class='line'>    <span class="n">aws</span><span class="o">.</span><span class="n">secret_access_key</span>         <span class="o">=</span>  <span class="s2">&quot;YOUR SECRET KEY&quot;</span>
</span><span class='line'>    <span class="n">aws</span><span class="o">.</span><span class="n">ami</span>                       <span class="o">=</span>  <span class="s2">&quot;ami-xxx&quot;</span>
</span><span class='line'>    <span class="n">aws</span><span class="o">.</span><span class="n">instance_type</span>             <span class="o">=</span>  <span class="s2">&quot;m1.medium&quot;</span>
</span><span class='line'>    <span class="n">aws</span><span class="o">.</span><span class="n">keypair_name</span>              <span class="o">=</span>  <span class="s2">&quot;KEYPAIR NAME&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">overide</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">username</span>              <span class="o">=</span>  <span class="s2">&quot;root&quot;</span>
</span><span class='line'>    <span class="n">overide</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">private_key_path</span>      <span class="o">=</span>  <span class="s2">&quot;PATH TO YOUR PRIVATE KEY&quot;</span>
</span><span class='line'>    <span class="n">overide</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span>                    <span class="o">=</span>  <span class="s1">&#39;dummy&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样配置以后你可以用<em>vagrant up &mdash;provider=aws</em>来远程启动AWS云里的虚拟机。当然之前你需要安装AWS的<a href="https://github.com/mitchellh/vagrant-aws">Provider</a>和配置这个Provider需要的dummy Box。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant plugin install vagrant-aws
</span><span class='line'>
</span><span class='line'>vagrant box add dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box
</span></code></pre></td></tr></table></div></figure>


<p>接下来的教程我们还是以VirtualBox这个Provider为例来讲解。</p>

<h2>Shared folders</h2>

<p>我们接下来可以打开注释里的<em>config.vm.synced_folder</em>并修改映射到已经存在的一个文件夹。以我的机器为例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;../training&quot;</span><span class="p">,</span> <span class="s2">&quot;/vagrant_data&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的话可以把本机Host里的一个文件夹映射到Guest虚拟机里。修改这个设置之后需要重启虚拟机来生效，命令是</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">vagrant</span> <span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样启动完之后登陆后你可以看到映射的文件夹:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant ssh
</span><span class='line'>
</span><span class='line'>vagrant@precise32:~<span class="nv">$ </span>ll /vagrant_data/
</span><span class='line'>total 16
</span><span class='line'>drwxr-xr-x  1 vagrant vagrant  238 Jul  4 10:40 ./
</span><span class='line'>drwxr-xr-x 24 root    root    4096 Nov 18 02:25 ../
</span><span class='line'>drwxr-xr-x  1 vagrant vagrant  170 Jul  4 10:39 cookbooks/
</span><span class='line'>drwxr-xr-x  1 vagrant vagrant  272 Jan  8  2016 Docker/
</span><span class='line'>-rw-r--r--  1 vagrant vagrant 8196 Jul  4 10:40 .DS_Store
</span><span class='line'>drwxr-xr-x  1 vagrant vagrant  102 Jul  4 10:39 intro/
</span><span class='line'>drwxr-xr-x  1 vagrant vagrant  102 Apr  5  2016 .vagrant/
</span></code></pre></td></tr></table></div></figure>


<h2>Network</h2>

<p>默认的虚拟机的网络是NAT形式的，我们可以从Vagrant启动的log里看出来：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; default: Preparing network interfaces based on configuration...
</span><span class='line'>    default: Adapter 1: <span class="nv">nat</span>
</span><span class='line'><span class="o">==</span>&gt; default: Forwarding ports...
</span><span class='line'>    default: <span class="nv">22</span> <span class="o">=</span>&gt; 2202 <span class="o">(</span>adapter 1<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到默认做了一个端口映射，所以我们可以通过访问本机端口2202来访问虚拟机的22(ssh)端口:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh vagrant@127.0.0.1 -p 2202
</span><span class='line'>The authenticity of host <span class="s1">&#39;[127.0.0.1]:2202 ([127.0.0.1]:2202)&#39;</span> can<span class="s1">&#39;t be established.</span>
</span><span class='line'><span class="s1">ECDSA key fingerprint is SHA256:q7StLmS/+YYwF42lL4HQJdMQGcAPpkKgzVlxORTisGE.</span>
</span><span class='line'><span class="s1">Are you sure you want to continue connecting (yes/no)? yes</span>
</span><span class='line'>
</span><span class='line'><span class="s1">vagrant@127.0.0.1&#39;</span>s password:
</span><span class='line'>
</span><span class='line'>Last login: Fri Nov 18 02:26:09 2016 from 10.0.2.2
</span><span class='line'>vagrant@precise32:~<span class="nv">$ </span>
</span></code></pre></td></tr></table></div></figure>


<p>这个就是vagrant ssh的实现原理，默认的用户名是<em>vagrant</em>密码也是<em>vagrant</em>。这样的网络结构做一些简单的部署测试可以的，比方说我们可以定义本机的8080端口映射到虚拟机的80端口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改网络拓扑结构和配置之后也有重启虚拟机。从启动log我们可以看到端口成功映射了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="o">==</span>&gt; default: Forwarding ports...
</span><span class='line'>    default: <span class="nv">80</span> <span class="o">=</span>&gt; 8080 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'>    default: <span class="nv">22</span> <span class="o">=</span>&gt; 2202 <span class="o">(</span>adapter 1<span class="o">)</span>
</span><span class='line'><span class="o">==</span>&gt; default: Running <span class="s1">&#39;pre-boot&#39;</span> VM customizations...
</span></code></pre></td></tr></table></div></figure>


<p>还有一种常用的网络结构是<em>private_network</em>，这种网络结构会创建一个只有主机能和虚拟机通信的私网，这种是通过指定虚拟机内网IP的形式来配置:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;private_network&quot;</span><span class="p">,</span> <span class="ss">ip</span><span class="p">:</span> <span class="s2">&quot;192.168.33.10&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的配置启动后，Host本机会拥有IP <em>192.168.33.1</em>, 这样本机和虚拟机就是一个网段，通信就没有障碍了。最后一种形式是<em>public_network</em>,这种就是为虚拟机建一个Bridge的网络，相当于虚拟机变成你现有网络里另一台机器。但是这种是受限于网络要求的，像我们公司就是不允许这种网络结构的，你的虚拟机得不到IP。<br>
当然这里网络配置都是针对本地的虚拟机，像是AWS，Openstack这种云里的虚拟机所在自己的Provider配置里来配置的。一般网络结构受限于云和Provider插件支持的类型。</p>

<h2>Provisioner</h2>

<p>现在虚拟机已经启动好了，我们需要配置,部署一些软件上去，这就用到了Provisioner。Vagrantfile也支持多个Provisioner，它们会按配置顺序挨个执行。例如我们可以打开注释里的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">   sudo apt-get update</span>
</span><span class='line'><span class="sh">   sudo apt-get install -y apache2</span>
</span><span class='line'><span class="no"> SHELL</span>
</span></code></pre></td></tr></table></div></figure>


<p>修改完之后我们又要用到一个新命令:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>vagrant provision
</span></code></pre></td></tr></table></div></figure>


<p>这个命令会执行所有定义的provision命令block。之后我们会在控制台看到很长的一段输出，成功执行之后我们就装好了Apache, 我们可以打开浏览器试一试。因为我们已经配置好了端口映射，所以访问本机的8080端口应该能到Apache的欢迎页面。</p>

<blockquote><p>It works!</p>

<p>This is the default web page for this server.</p>

<p>The web server software is running but no content has been added, yet.</p></blockquote>

<br>


<p>这篇教程用到的完整Vagrantfile（去掉了一些注释）如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">v</span><span class="c1"># -*- mode: ruby -*-</span>
</span><span class='line'><span class="c1"># vi: set ft=ruby :</span>
</span><span class='line'>
</span><span class='line'><span class="no">Vagrant</span><span class="o">.</span><span class="n">configure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">config</span><span class="o">|</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Every Vagrant development environment requires a box. You can search for</span>
</span><span class='line'>  <span class="c1"># boxes at https://atlas.hashicorp.com/search.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span> <span class="o">=</span> <span class="s2">&quot;hashicorp/precise32&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Create a forwarded port mapping which allows access to a specific port</span>
</span><span class='line'>  <span class="c1"># within the machine from a port on the host machine. In the example below,</span>
</span><span class='line'>  <span class="c1"># accessing &quot;localhost:8080&quot; will access port 80 on the guest machine.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">network</span> <span class="s2">&quot;forwarded_port&quot;</span><span class="p">,</span> <span class="ss">guest</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="ss">host</span><span class="p">:</span> <span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Share an additional folder to the guest VM. The first argument is</span>
</span><span class='line'>  <span class="c1"># the path on the host to the actual folder. The second argument is</span>
</span><span class='line'>  <span class="c1"># the path on the guest to mount the folder. And the optional third</span>
</span><span class='line'>  <span class="c1"># argument is a set of non-required options.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">synced_folder</span> <span class="s2">&quot;../training&quot;</span><span class="p">,</span> <span class="s2">&quot;/vagrant_data&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Provider-specific configuration so you can fine-tune various</span>
</span><span class='line'>  <span class="c1"># backing providers for Vagrant. These expose provider-specific options.</span>
</span><span class='line'>  <span class="c1"># Example for VirtualBox:</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="s2">&quot;virtualbox&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">vb</span><span class="o">|</span>
</span><span class='line'>    <span class="c1"># Display the VirtualBox GUI when booting the machine</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">gui</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Customize the amount of memory on the VM:</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">memory</span> <span class="o">=</span> <span class="s2">&quot;1024&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Configure the virtual machine name displayed in VirtualBox</span>
</span><span class='line'>    <span class="n">vb</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s2">&quot;vagrant_leanring&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provider</span> <span class="ss">:aws</span> <span class="k">do</span> <span class="o">|</span><span class="n">aws</span><span class="p">,</span><span class="n">overide</span><span class="o">|</span>
</span><span class='line'>      <span class="n">aws</span><span class="o">.</span><span class="n">security_groups</span>           <span class="o">=</span>  <span class="sx">%w(everything_open)</span>
</span><span class='line'>      <span class="n">aws</span><span class="o">.</span><span class="n">access_key_id</span>             <span class="o">=</span>  <span class="s2">&quot;YOUR KEY&quot;</span>
</span><span class='line'>      <span class="n">aws</span><span class="o">.</span><span class="n">secret_access_key</span>         <span class="o">=</span>  <span class="s2">&quot;YOUR SECRET KEY&quot;</span>
</span><span class='line'>      <span class="n">aws</span><span class="o">.</span><span class="n">ami</span>                       <span class="o">=</span>  <span class="s2">&quot;ami-xxx&quot;</span>
</span><span class='line'>      <span class="n">aws</span><span class="o">.</span><span class="n">instance_type</span>             <span class="o">=</span>  <span class="s2">&quot;m1.medium&quot;</span>
</span><span class='line'>      <span class="n">aws</span><span class="o">.</span><span class="n">keypair_name</span>              <span class="o">=</span>  <span class="s2">&quot;KEYPAIR NAME&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">overide</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">username</span>              <span class="o">=</span>  <span class="s2">&quot;root&quot;</span>
</span><span class='line'>      <span class="n">overide</span><span class="o">.</span><span class="n">ssh</span><span class="o">.</span><span class="n">private_key_path</span>      <span class="o">=</span>  <span class="s2">&quot;PATH TO YOUR PRIVATE KEY&quot;</span>
</span><span class='line'>      <span class="n">overide</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">box</span>                    <span class="o">=</span>  <span class="s1">&#39;dummy&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Enable provisioning with a shell script. Additional provisioners such as</span>
</span><span class='line'>  <span class="c1"># Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the</span>
</span><span class='line'>  <span class="c1"># documentation for more information about their specific syntax and use.</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">vm</span><span class="o">.</span><span class="n">provision</span> <span class="s2">&quot;shell&quot;</span><span class="p">,</span> <span class="ss">inline</span><span class="p">:</span> <span class="o">&lt;&lt;-</span><span class="no">SHELL</span>
</span><span class='line'><span class="sh">    sudo apt-get update</span>
</span><span class='line'><span class="sh">    sudo apt-get install -y apache2</span>
</span><span class='line'><span class="no">  SHELL</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<br><br>


<p>这篇教程到这就告一段落了，我想我还会写第二部分讲述如何用一个Vagrantfile配置多个虚拟机，然后讲完Chef后还会写一个结合Vagrant和Chef的教程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Itunes的备份之后的文件在哪儿]]></title>
    <link href="http://seanguo.github.io/blog/2013/11/27/itunes-backup-location/"/>
    <updated>2013-11-27T19:46:51+08:00</updated>
    <id>http://seanguo.github.io/blog/2013/11/27/itunes-backup-location</id>
    <content type="html"><![CDATA[<ul>
<li><p><strong>Windows 7</strong>的在 C:/Users/[用户名]/AppData/Roaming/Apple Computer/MobileSync/Backup/</p></li>
<li><p><strong>Windows XP</strong>: C:/Documents and Settings(用户名)/Application Data/Apple Computer/MobileSync/Backup</p></li>
<li><p><strong>Mac</strong> 中：~/Library/Application Support/MobileSync/Backup</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NoSql Database Compare]]></title>
    <link href="http://seanguo.github.io/blog/2013/11/27/nosql-database-compare/"/>
    <updated>2013-11-27T16:47:57+08:00</updated>
    <id>http://seanguo.github.io/blog/2013/11/27/nosql-database-compare</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>The goal of this article is trying compare the popular NoSql databases and choose one for one of our company&rsquo;s product. It was based on SQL database but suffering from low scalibility and performance. So we want to migrate to NoSQL based product. Since Most of the NoSQL database are of high scalibility and performance under some condition.</p>

<p>Before that we need to know some of the backgournd knowlege. Currently there are two kind of data store model:</br></p>

<!-- more -->


<h3>RDBMS:</h3>

<p>A short definition of an RDBMS is: a DBMS in which data is stored in tables and the relationships among the data are also stored in tables. The data can be accessed or reassembled in many different ways without having to change the table forms.</br></p>

<p>This one is the data store model currently used in the SIPoint product that is facilitated by the using of the Hibernate framework to get a uniform interface to manipulate all kinds of database. The Hibernate framework is doing the Object Relation Mapping to keep programmer from complex SQL language. </br></p>

<p>But the disadvantage of the RDBMS is the low efficiency when get lots of concurrent write operation to the database and it is hard to scale the database to multiple servers.  And in the contrast here comes:</p>

<h3>NoSql:</h3>

<p>In computing, NoSQL is a broad class of database management systems that differ from classic relational database management systems (RDBMSes) in some significant ways. These data stores may not require fixed table schemas, usually avoid join operations, and typically scale horizontally. Academia typically refers to these databases as structured storage, a term that would include classic relational databases as a subset.
NoSql sacrifices some not necessary consistence in some circumstances to get high performance and easy to scale up.</br></p>

<h2>NoSQL vs. SQL databases</h2>

<p>There are some concepts must be given a short introduction before we can do the compare.</br></p>

<ul>
<li><strong>Relation Model</strong>: The relational model&rsquo;s central idea is to describe a database as a collection of predicates over a finite set of predicate variables, describing constraints on the possible values and combinations of values. The content of the database at any given time is a finite (logical) model of the database, i.e. a set of relations, one per predicate variable, such that all predicates are satisfied. A request for information from the database (a database query) is also a predicate.</li>
<li><strong>ACID</strong>: ACID (atomicity, consistency, isolation, durability) is a set of properties that guarantee database transactions are processed reliably.</li>
<li><strong>Atomicity</strong> requires that database modifications must follow an &ldquo;all or nothing&rdquo; rule. Each transaction is said to be atomic. If one part of the transaction fails, the entire transaction fails and the database state is left unchanged.</li>
<li><strong>Isolation</strong> refers to the requirement that other operations cannot access data that has been modified during a transaction that has not yet completed.</li>
<li><strong>Durability</strong> is the ability of the DBMS to recover the committed transaction updates against any kind of system failure (hardware or software).</li>
<li><strong>CAP</strong>: The CAP theorem, also known as Brewer&rsquo;s theorem, states that there are three primary concerns you must balance when choosing a data management system: consistency, availability, and partition tolerance.</br></li>
<li><strong>Consistency</strong> means that each client always has the same view of the data. </br></li>
<li><strong>Availability</strong> means that all clients can always read and write.</br></li>
<li><p><strong>Partition</strong> tolerance means that the system works well across physical network partitions.</br>
According to the theorem, a distributed system can satisfy any two of these guarantees at the same time, but not all three.</br></p></li>
<li><p><strong>Data Model</strong>:</p></li>
<li>Relational systems are the databases we&rsquo;ve been using for a while now. RDBMSs and systems that support ACIDity and joins are considered relational.</br></li>
<li>Key-value systems basically support get, put, and delete operations based on a primary key.</br></li>
<li>Column-oriented systems still use tables but have no joins (joins must be handled within your
application). Obviously, they store data by column as opposed to traditional row-oriented databases. This makes aggregations much easier.</br></li>
<li><p>Document-oriented systems store structured &ldquo;documents&rdquo; such as JSON or XML but have no joins (joins must be handled within your application). It&rsquo;s very easy to map data from object-oriented software to these systems.</br></p></li>
<li><p><strong>MapReduce</strong>: MapReduce is a framework for processing huge datasets on certain kinds of distributable problems using a large number of computers (nodes), collectively referred to as a cluster (if all nodes use the same hardware) or as a grid (if the nodes use different hardware). Computational processing can occur on data stored either in a filesystem (unstructured) or within a database (structured).</p></li>
<li>&ldquo;<strong>Map</strong>&rdquo; step: The master node takes the input, partitions it up into smaller sub-problems, and distributes those to worker nodes. A worker node may do this again in turn, leading to a multi-level tree structure. The worker node processes that smaller problem, and passes the answer back to its master node.</li>
<li><p>&ldquo;<strong>Reduce</strong>&rdquo; step: The master node then takes the answers to all the sub-problems and combines them in some way to get the output – the answer to the problem it was originally trying to solve.</br>
The advantage of MapReduce is that it allows for distributed processing of the map and reduction operations. Provided each mapping operation is independent of the others, all maps can be performed in parallel. This framework is often applied by the distributed NoSQL databases.</br></p></li>
<li><p><strong>Eventual consistency</strong>: This is a specific form of weak consistency; the storage system guarantees that if no new updates are made to the object, eventually all accesses will return the last updated value. If no failures occur, the maximum size of the inconsistency window can be determined based on factors such as communication delays, the load on the system, and the number of replicas involved in the replication scheme. The most popular system that implements eventual consistency is DNS (Domain Name System). Updates to a name are distributed according to a configured pattern and in combination with time-controlled caches; eventually, all clients will see the update.</br></p></li>
<li><strong>Multiversion concurrency control</strong> (abbreviated MCC or MVCC), in the database field of computer science, is a concurrency control method commonly used by database management systems to provide concurrent access to the database and in programming languages to implement transactional memory.</br></li>
</ul>


<p>For instance, a database will implement updates not by deleting an old piece of data and overwriting it with a new one, but instead by marking the old data as obsolete and adding the newer &ldquo;version.&rdquo; Thus there are multiple versions stored, but only one is the latest. This allows the database to avoid overhead of filling in holes in memory or disk structures but requires (generally) the system to periodically sweep through and delete the old, obsolete data objects.</br></p>

<p>Below are the general compare between the two data store models:</br></p>

<table>
<thead>
<tr>
<th></th>
<th> Name  </th>
<th> Schema </th>
<th> ACID </th>
<th> CAP </th>
<th> Efficiency </th>
<th> Scalability </th>
<th> Programming </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> RDBMS </td>
<td> Fixed  </td>
<td> All </td>
<td> Hardly no P </td>
<td> Hard to scale </td>
<td> Hibernate to unify all DB </td>
<td></td>
</tr>
<tr>
<td></td>
<td> NoSQL </td>
<td> Not require fixed schema </td>
<td> Not All </td>
<td> CA or AP </td>
<td> High performance on IO, and can use MapReduce to distribute work to multiple machines </td>
<td> High scalability on design </td>
<td> Each database has its own API, but it’s simple |</td>
</tr>
</tbody>
</table>


<p></br></p>

<h3>NoSql databases compare</h3>

<p>Below we choose some popular NoSQL databases to do a comprehensive compare:</p>

<h3>Basic compare</h3>

<table>
<thead>
<tr>
<th></th>
<th align="left"> Name </th>
<th> Type </th>
<th> Open Source  </th>
<th> Source Language </th>
<th> CAP </th>
<th> Managing shell </th>
<th> Query Method </th>
<th> API </th>
<th> Concurrency </th>
<th> Successful usecases   </th>
<th> Scalability </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left"> Cassadra </td>
<td> Wide column </td>
<td> Y </td>
<td> JAVA </td>
<td> AP, Configurable C </td>
<td> No shell  </td>
<td> MapReduce </td>
<td> Many Thrift client </td>
<td> Eventually consistence </td>
<td> Digg, Facebook, Twitter etc. </td>
<td> P2P, no single points of failure</td>
</tr>
<tr>
<td></td>
<td align="left"> Voldemort </td>
<td> Key-value </td>
<td> Y </td>
<td> C++ </td>
<td> AP </td>
<td> Built-in </td>
<td>   </td>
<td> Java </td>
<td> Eventually Consistent </td>
<td> Linkedin </td>
<td> Dynamo</td>
</tr>
<tr>
<td></td>
<td align="left"> Kyoto Cabinet &amp; Kyoto Tycoon </td>
<td> Key-value </td>
<td> Y </td>
<td> C++ </td>
<td> AP </td>
<td> Command Line Utility `kchashmgr&#8217; </td>
<td> MapReduce </td>
<td> Many langs </td>
<td> Eventually consistency </td>
<td> mixi.jp </td>
<td> Asynchronous Master-slave or dual-master replication</td>
</tr>
<tr>
<td></td>
<td align="left"> MongoDB </td>
<td> Document oriented </td>
<td> Y </td>
<td> C++ </td>
<td> CP </td>
<td> Built-in </td>
<td> Dynamic object-based language &amp; MapReduce </td>
<td> BSON </td>
<td> Update in Place.  </td>
<td> The New York Times,SourceForge </td>
<td> Master-Slave Replication |</td>
</tr>
<tr>
<td></td>
<td align="left"> HBase </td>
<td> Wide column </td>
<td> Y </td>
<td> JAVA </td>
<td> CP </td>
<td> Jruby </td>
<td> MapReduce Java / any exec </td>
<td> Java / any writer  </td>
<td>   </td>
<td>   </td>
<td> Hadoop</td>
</tr>
<tr>
<td></td>
<td align="left"> Redis </td>
<td> Key-value </td>
<td> Y </td>
<td> C </td>
<td> CP </td>
<td> Built-in </td>
<td>  </td>
<td> Tons of languages </td>
<td> In memory and saves asynchronous disk after a defined time. Append only mode available. Different kinds of fsync policies. </td>
<td> github，Engine Yard </td>
<td> Master-slave replication</td>
</tr>
<tr>
<td></td>
<td align="left"> CouchDB </td>
<td> Document oriented </td>
<td> Y </td>
<td> Erlang </td>
<td> AP </td>
<td> None </td>
<td> MapReduceR of JavaScript </td>
<td> Funcs REST/JSON </td>
<td> MVCC </td>
<td>  </td>
<td>  peer-based distributed</td>
</tr>
</tbody>
</table>


<p></br></p>

<h3>Farther compare:</h3>

<p>For those databases mentioned in the above, first we dropped CouchDB since it only has REST API. KC and Redis are the lightweight Key-value implementation and can scale up in a small cluster. And Cassandra, Voldemort and HBase are good solutions for large-scale clusters. And for MongoDB the only document oriented database we will describe it later. And we will regroup these databases and do a farther compare.</p>

<h4>Cassandra:</h4>

<p>The Apache Cassandra Project develops a highly scalable second-generation distributed database, bringing together Dynamo&rsquo;s fully distributed design and Bigtable&rsquo;s ColumnFamily-based data model.
Cassandra was open sourced by Facebook in 2008, and is now developed by Apache committers and contributors from many companies.</p>

<h5>Feature:</h5>

<ul>
<li>Fault Tolerant
Data is automatically replicated to multiple nodes for fault-tolerance. Replication across multiple data centers is supported. Failed nodes can be replaced with no downtime.</li>
<li>Decentralized
Every node in the cluster is identical. There are no network bottlenecks. There are no single points of failure.</li>
<li>You&rsquo;re in Control
Choose between synchronous or asynchronous replication for each update. Highly available asynchronous operations are optimized with features like Hinted Handoff and Read Repair.</li>
<li>Rich Data Model
Allows efficient use for many applications beyond simple key/value.</li>
<li>Elastic
Read and write throughput both increase linearly as new machines are added, with no downtime or interruption to applications.</li>
<li>Durable
Cassandra is suitable for applications that can&rsquo;t afford to lose data, even when an entire data center goes down.</li>
</ul>


<h5>Data Model:</h5>

<p>Cassandra provides a structured key-value store with tunable consistency. Keys map to multiple values, which are grouped into column families. The column families are fixed when a Cassandra database is created, but columns can be added to a family at any time. Furthermore, columns are added only to specified keys, so different keys can have different numbers of columns in any given family.</p>

<p>The values from a column family for each key are stored together. This makes Cassandra a hybrid data management system between a column-oriented DBMS and a row-oriented store. Also, besides using the way of modeling of BigTable, it has properties like eventual consistency, the Gossip protocol, a master-master way of serving the read and write requests that are inspired by Amazon&rsquo;s Dynamo.
The basic concepts are:</p>

<ul>
<li>Cluster: the machines (nodes) in a logical Cassandra instance. Clusters can contain multiple keyspaces.</li>
<li>Keyspace: a namespace for ColumnFamilies, typically one per application.</li>
<li>ColumnFamilies contain multiple columns, each of which has a name, value, and a timestamp, and which are referenced by row keys.</li>
<li>SuperColumns can be thought of as columns that themselves have subcolumns.</li>
</ul>


<p><strong>Limitations</strong>:</p>

<ul>
<li>All data for a single row must fit (on disk) on a single machine in the cluster. Because row keys alone are used to determine the nodes responsible for replicating their data, the amount of data associated with a single key has this upper bound.</li>
<li>A single column value may not be larger than 2GB.</li>
<li>The maximum of column per row is 2 billion.</li>
<li>The key (and column names) must be under 64K bytes.</li>
</ul>


<h4>HBase</h4>

<p>HBase is the Hadoop database. Use it when you need random, realtime read/write access to your Big Data. This project&rsquo;s goal is the hosting of very large tables &mdash; billions of rows X millions of columns &mdash; atop clusters of commodity hardware.
HBase is an open-source, distributed, versioned, column-oriented store modeled after Google&#8217; Bigtable: A Distributed Storage System for Structured by Chang et al. Just as Bigtable leverages the distributed data storage provided by the Google File System, HBase provides Bigtable-like capabilities on top of Hadoop.</p>

<h5>Feature:</h5>

<ul>
<li>Convenient base classes for backing Hadoop MapReduce jobs with HBase tables including cascading, hive and pig source and sink modules</li>
<li>Query predicate push down via server side scan and get filters</li>
<li>Optimizations for real time queries</li>
<li>A Thrift gateway and a REST-ful Web service that supports XML, Protobuf, and binary data encoding options</li>
<li>Extensible jruby-based (JIRB) shell</li>
<li>Support for exporting metrics via the Hadoop metrics subsystem to files or Ganglia; or via JMX</li>
</ul>


<h5>Data Model:</h5>

<p>In short, applications store data into an HBase table. Tables are made of rows and columns. All columns in HBase belong to a particular column family. Table cells &mdash; the intersection of row and column coordinates &mdash; are versioned. A cell’s content is an uninterpreted array of bytes.</p>

<p>Table row keys are also byte arrays so almost anything can serve as a row key from strings to binary representations of longs or even serialized data structures. Rows in HBase tables are sorted by row key. The sort is byte-ordered. All table accesses are via the table row key &mdash; its primary key.
Cassandra and HBase are both highly scalable column-oriented database. Cassandra wins for its simple configuration and flexibility to switch between CAP attributes, no single point of failure is also more scalable.</p>

<h4>Voldemort:</h4>

<p>Voldemort is a distributed key-value storage system</p>

<h5>Feature:</h5>

<ul>
<li>Voldemort combines in memory caching with the storage system so that a separate caching tier is not required (instead the storage system itself is just fast)</li>
<li>Unlike MySQL replication, both reads and writes scale horizontally</li>
<li>Data portioning is transparent, and allows for cluster expansion without rebalancing all data</li>
<li>Data replication and placement is decided by a simple API to be able to accommodate a wide range of application specific strategies</li>
<li>The storage layer is completely mockable so development and unit testing can be done against a throw-away in-memory storage system without needing a real cluster (or even a real storage system) for simple testing</li>
</ul>


<h5>Data Model:</h5>

<p>The equivalent here is a &ldquo;store&rdquo;, we don&rsquo;t use the word table since the data is not necessarily tabular (a value can contain lists and mappings which are not considered in a strict relational mapping). Each key is unique to a store, and each key can have at most one value.</p>

<p>Note that although we don&rsquo;t support one-many relations, we do support lists as values that accomplishes the same thing&mdash;so it is possible to store a reasonable number of values associated with a single key. This corresponds to a java.util.Map where the value is a java.util.List.</p>

<p>Serialization in Voldemort is pluggable so you can use one of the baked in serializers or easily write your own. At the lowest level the data format for Voldemort is just arrays of bytes for both keys and values. Higher-level data formats are a configuration option that are set for each Store&mdash;any format can be supported by implementing a Serializer class that handles the translation between bytes and objects. Doing this ensures the client serializes the bytes correctly.</p>

<p><strong>Operations</strong>:</p>

<p>To enable high performance and availability we allow only very simple key-value data access. Both keys and values can be complex compound objects including lists or maps, but none-the-less the only supported queries are effectively the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>value = store.get(key)
</span><span class='line'>store.put(key, value)
</span><span class='line'>store.delete(key)</span></code></pre></td></tr></table></div></figure>


<p>Voldemort supports hashtable semantics, so a single value can be modified at a time and retrieval is by primary key. This makes distribution across machines particularly easy since everything can be split by the primary key.</p>

<h4>Kyoto Cabinet:</h4>

<p>Kyoto Cabinet is a library of routines for managing a database. The database is a simple data file containing records, each is a pair of a key and a value. Every key and value is serial bytes with variable length. Both binary data and character string can be used as a key and a value. Each key must be unique within a database. There is neither concept of data tables nor data types. Records are organized in hash table or B+ tree.</p>

<h5>Feature</h5>

<p>The database is a simple data file containing records, each is a pair of a key and a value. Every key and value is serial bytes with variable length. Both binary data and character string can be used as a key and a value. Each key must be unique within a database. There is neither concept of data tables nor data types. Records are organized in hash table or B+ tree.</p>

<h5>Operations:</h5>

<p>The following access methods are provided to the database: storing a record with a key and a value, deleting a record by a key, retrieving a record by a key. Moreover, traversal access to every key are provided.</p>

<h4>Redis</h4>

<p>Redis is an open source, advanced key-value store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets and sorted sets.
You can run atomic operations on these types, like appending to a string; incrementing the value in a hash; pushing to a list; computing set intersection, union and difference; or getting the member with highest ranking in a sorted set.</p>

<h5>Feature</h5>

<p>Redis is an open source, advanced key-value store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets and sorted sets.
You can run atomic operations on these types, like appending to a string; incrementing the value in a hash; pushing to a list; computing set intersection, union and difference; or getting the member with highest ranking in a sorted set.</p>

<h5>Data Model:</h5>

<p>As you already probably know Redis is not a plain key-value store, actually it is a data structures server, supporting different kind of values. That is, you can&rsquo;t just set strings as values of keys. All the following data types are supported as values:</p>

<ul>
<li>Binary-safe strings.</li>
<li>Lists of binary-safe strings.</li>
<li>Sets of binary-safe strings, that are collection of unique unsorted elements. You can think at this as a Ruby hash where all the keys are set to the &lsquo;true&rsquo; value.</li>
<li>Sorted sets, similar to Sets but where every element is associated to a floating number score. The elements are taken sorted by score. You can think of this as Ruby hashes where the key is the element and the value is the score, but where elements are always taken in order without requiring a sorting operation.</li>
</ul>


<h4>Limitations:</h4>

<p>Redis meets the needs for Registrar very well since its support on list of value and its high performance on IO operation. But it’s written in C, it will require some work to make it start when delivering to users in the MOHO framework.</br></p>

<p>  In the three Key-value type databases, Voldemort is a more distributed Key-value NoSQL database implementation than the other two, and it has a very simple API to manipulate the database.</p>

<h2>Conclusion:</h2>

<p>MongoDB is document oriented and very good at large amount of data searching. It is a good option for document store.</br>
Redis will be good choice for K-V mapping don’t scale too large since it has very good performance on concurrent IO and support list type value. Voldemort will be good choice in a large-scale deployment for its high available design and simple API.</br>
But Redis and Voldemort are Key-value databases that do not have enough function for the future complicated data migrated from RDBMS requirement.</br>
So finally we choose Cassadra. It is a mixed type database, which has Dynamo’s distributed Key-value feature, and also have the rich function from the column feature like Google’s Bigtable. It is suitable for the situation both usecases in the our product. And it’s very mature on production, a open-source Java project and for its HA and HS in large scale.</p>

<h2>Reference</h2>

<ol>
<li>SQL vs. NoSQL <a href="http://www.linuxjournal.com/article/10770?page=0,0">http://www.linuxjournal.com/article/10770?page=0,0</a></br></li>
<li>NoSQL数据库探讨之一 － 为什么要用非关系数据库？ <a href="http://robbin.iteye.com/blog/524977">http://robbin.iteye.com/blog/524977</a></br></li>
<li>NoSQL databases <a href="http://nosql-database.org/">http://nosql-database.org/</a></br></li>
<li>Visual Guide to NoSQL Systems <a href="http://blog.nahurst.com/visual-guide-to-nosql-systems">http://blog.nahurst.com/visual-guide-to-nosql-systems</a></br></li>
<li>Eventually consistence <a href="http://www.allthingsdistributed.com/2008/12/eventually_consistent.html">http://www.allthingsdistributed.com/2008/12/eventually_consistent.html</a></br></li>
<li>Brewer&rsquo;s CAP Theorem <a href="http://www.julianbrowne.com/article/viewer/brewers-cap-theorem">http://www.julianbrowne.com/article/viewer/brewers-cap-theorem</a></br></li>
<li>Cassandra <a href="http://cassandra.apache.org/">http://cassandra.apache.org/</a></br></li>
<li>Cassandra data model <a href="http://wiki.apache.org/cassandra/DataModel">http://wiki.apache.org/cassandra/DataModel</a></br></li>
<li>Cassandra Architecture <a href="http://wiki.apache.org/cassandra/ArchitectureOverview">http://wiki.apache.org/cassandra/ArchitectureOverview</a></br></li>
<li>Cassandra Embedding <a href="http://wiki.apache.org/cassandra/Embedding">http://wiki.apache.org/cassandra/Embedding</a></br></li>
<li>Running Cassandra as an embedded service <a href="http://prettyprint.me/2010/02/14/running-cassandra-as-an-embedded-service/">http://prettyprint.me/2010/02/14/running-cassandra-as-an-embedded-service/</a></br></li>
<li>HBase <a href="http://hbase.apache.org/">http://hbase.apache.org/</a></br></li>
<li>HBase vs. Cassandra NoSQL battle <a href="http://www.roadtofailure.com/2009/10/29/hbase-vs-cassandra-nosql-battle/">http://www.roadtofailure.com/2009/10/29/hbase-vs-cassandra-nosql-battle/</a></br></li>
<li>HBase vs. Cassandra : why we moved <a href="http://ria101.wordpress.com/2010/02/24/hbase-vs-cassandra-why-we-moved/">http://ria101.wordpress.com/2010/02/24/hbase-vs-cassandra-why-we-moved/</a></br></li>
<li>Voldemort <a href="http://project-voldemort.com/">http://project-voldemort.com/</a></br></li>
<li>Voldemort design <a href="http://project-voldemort.com/design.php">http://project-voldemort.com/design.php</a></br></li>
<li>Dynamo: Amazon&rsquo;s Highly Available Key-Value Store <a href="http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf">http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf</a></br></li>
<li>MongoDB <a href="http://www.mongodb.org/">http://www.mongodb.org/</a></br></li>
<li>CouchDB <a href="http://couchdb.apache.org/">http://couchdb.apache.org/</a></br></li>
<li>Redis <a href="http://redis.io/">http://redis.io/</a></br></li>
<li>Tokyo Cabinet <a href="http://fallabs.com/tokyocabinet/">http://fallabs.com/tokyocabinet/</a></br></li>
<li>Fundamental Specifications of Kyoto Cabinet <a href="http://fallabs.com/kyotocabinet/spex.html#features">http://fallabs.com/kyotocabinet/spex.html#features</a></br></li>
<li>MemcacheDB <a href="http://memcachedb.org/">http://memcachedb.org/</a></br></li>
<li>Database management system choices – beyond relational <a href="http://www.dbms2.com/2008/02/15/non-relational-database-management/">http://www.dbms2.com/2008/02/15/non-relational-database-management/</a></br></li>
<li>NoSQL and RDBMS – choose your weapon <a href="http://www.servicestack.net/mythz_blog/?p=129">http://www.servicestack.net/mythz_blog/?p=129</a></br></li>
<li>Streamy Development blog <a href="http://devblog.streamy.com/">http://devblog.streamy.com/</a></br></li>
<li>Google Code University <a href="http://code.google.com/edu/parallel/mapreduce-tutorial.html">http://code.google.com/edu/parallel/mapreduce-tutorial.html</a></br></li>
<li>Dynamo <a href="http://en.wikipedia.org/wiki/Dynamo_%28storage_system%29">http://en.wikipedia.org/wiki/Dynamo_%28storage_system%29</a></br></li>
<li>BigTable <a href="http://en.wikipedia.org/wiki/Bigtable">http://en.wikipedia.org/wiki/Bigtable</a></br></li>
<li>Hadoop <a href="http://en.wikipedia.org/wiki/Hadoop">http://en.wikipedia.org/wiki/Hadoop</a></br></li>
<li>Thrift <a href="http://thrift.apache.org/">http://thrift.apache.org/</a></br></li>
</ol>


<h2>Appendix NoSQL Database setup and programming guide</h2>

<h3>Cassadra:</h3>

<h4>Setup</h4>

<p>Cassandra is meant to run on a cluster of nodes, but will run equally well on a single machine. Download a binary distribution. The distribution&rsquo;s sample configuration conf/cassandra.yaml contains reasonable defaults for single node operation, but you will need to make sure that the paths exist for data_file_directories, commitlog_directory, and saved_caches_directory. Additionally, take a minute now to look over the logging configuration in conf/log4j.properties and make sure that directories exist for the configured log file(s) as well.</p>

<p>Some people running OS X have trouble getting Java 6 to work. If you&rsquo;ve kept up with Apple&rsquo;s updates, Java 6 should already be installed (it comes in Mac OS X 10.5 Update 1). Unfortunately, Apple does not default to using it. What you have to do is change your JAVA_HOME environment setting to <em>/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home</em> and add <em>/System/Library/Frameworks/JavaVM.framework/Versions/1.6/Home/bin</em> to the beginning of your PATH.</p>

<p>And now for the moment of truth, start up Cassandra by invoking bin/cassandra -f from the command line3. The service should start in the foreground and log gratuitously to standard-out.</p>

<h4>Programming</h4>

<p>The recommended way to communicate with Cassandra in your application is to use a higher-level client. These provide programming language specific APIs for talking to Cassandra in a variety of languages. The details will vary depending on programming language and client, but in general using a higher-level client will mean that you have to write less code and get several features for free that you would otherwise have to write yourself.  Using Hector for example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">riptano</span><span class="o">.</span><span class="na">cassandra</span><span class="o">.</span><span class="na">hector</span><span class="o">.</span><span class="na">example</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.cassandra.serializers.StringSerializer</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.Cluster</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.Keyspace</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.beans.HColumn</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.exceptions.HectorException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.factory.HFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.mutation.Mutator</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.query.ColumnQuery</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">me.prettyprint.hector.api.query.QueryResult</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Inserts the value &quot;John&quot; under the Column &quot;first&quot; for the </span>
</span><span class='line'><span class="cm"> * key &quot;jsmith&quot; in the Standard1 ColumnFamily </span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * To run this example from maven: </span>
</span><span class='line'><span class="cm"> * mvn -e exec:java -Dexec.mainClass=&quot;com.riptano.cassandra.hector.example.InsertSingleColumn&quot;</span>
</span><span class='line'><span class="cm"> * </span>
</span><span class='line'><span class="cm"> * @author zznate</span>
</span><span class='line'><span class="cm"> *</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InsertSingleColumn</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">StringSerializer</span> <span class="n">stringSerializer</span> <span class="o">=</span> <span class="n">StringSerializer</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Cluster</span> <span class="n">cluster</span> <span class="o">=</span> <span class="n">HFactory</span><span class="o">.</span><span class="na">getOrCreateCluster</span><span class="o">(</span><span class="s">&quot;TestCluster&quot;</span><span class="o">,</span> <span class="s">&quot;localhost:9160&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Keyspace</span> <span class="n">keyspaceOperator</span> <span class="o">=</span> <span class="n">HFactory</span><span class="o">.</span><span class="na">createKeyspace</span><span class="o">(</span><span class="s">&quot;Keyspace1&quot;</span><span class="o">,</span> <span class="n">cluster</span><span class="o">);</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Mutator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">mutator</span> <span class="o">=</span> <span class="n">HFactory</span><span class="o">.</span><span class="na">createMutator</span><span class="o">(</span><span class="n">keyspaceOperator</span><span class="o">,</span> <span class="n">StringSerializer</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="n">mutator</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="s">&quot;jsmith&quot;</span><span class="o">,</span> <span class="s">&quot;Standard1&quot;</span><span class="o">,</span> <span class="n">HFactory</span><span class="o">.</span><span class="na">createStringColumn</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">,</span> <span class="s">&quot;John&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">ColumnQuery</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">columnQuery</span> <span class="o">=</span> <span class="n">HFactory</span><span class="o">.</span><span class="na">createStringColumnQuery</span><span class="o">(</span><span class="n">keyspaceOperator</span><span class="o">);</span>
</span><span class='line'>            <span class="n">columnQuery</span><span class="o">.</span><span class="na">setColumnFamily</span><span class="o">(</span><span class="s">&quot;Standard1&quot;</span><span class="o">).</span><span class="na">setKey</span><span class="o">(</span><span class="s">&quot;jsmith&quot;</span><span class="o">).</span><span class="na">setName</span><span class="o">(</span><span class="s">&quot;first&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">QueryResult</span><span class="o">&lt;</span><span class="n">HColumn</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">columnQuery</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Read HColumn from cassandra: &quot;</span> <span class="o">+</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Verify on CLI with:  get Keyspace1.Standard1[&#39;jsmith&#39;] &quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HectorException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">cluster</span><span class="o">.</span><span class="na">getConnectionManager</span><span class="o">().</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>HBase</h3>

<h4>Setup:</h4>

<p>Download and unpack the latest stable release. Click on the folder named stable and then download the file that ends in .tar.gz to your local filesystem; e.g. hbase-0.91.0-SNAPSHOT.tar.gz. Decompress and untar your download and then change into the unpacked directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nv">$ </span>tar xfz hbase-0.91.0-SNAPSHOT.tar.gz
</span><span class='line'> <span class="nv">$ </span><span class="nb">cd </span>hbase-0.91.0-SNAPSHOT
</span></code></pre></td></tr></table></div></figure>


<p>At this point, you are ready to start HBase. But before starting it, you might want to edit conf/hbase-site.xml and set the directory you want HBase to write to, hbase.rootdir.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'> <span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'> <span class="cp">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>   <span class="nt">&lt;property&gt;</span>
</span><span class='line'>     <span class="nt">&lt;name&gt;</span>hbase.rootdir<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>     <span class="nt">&lt;value&gt;</span>file:///DIRECTORY/hbase<span class="nt">&lt;/value&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/property&gt;</span>
</span><span class='line'> <span class="nt">&lt;/configuration&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Replace DIRECTORY in the above with a path to a directory where you want HBase to store its data. By default, hbase.rootdir is set to /tmp/hbase-${user.name} which means you&rsquo;ll lose all your data whenever your server reboots (Most operating systems clear /tmp on restart).
$ ./bin/start-hbase.sh starting Master, logging to logs/hbase-user-master-example.org.out</p>

<p>You should now have a running standalone HBase instance. In standalone mode, HBase runs all daemons in the the one JVM; i.e. both the HBase and ZooKeeper daemons. HBase logs can be found in the logs subdirectory. Check them out especially if HBase had trouble starting.</p>

<h4>Programming</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hbase.client.HTable</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hbase.client.Scanner</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hbase.io.BatchUpdate</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hbase.io.Cell</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.apache.hadoop.hbase.io.RowResult</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClient</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// You need a configuration object to tell the client where to connect.</span>
</span><span class='line'>    <span class="c1">// But don&#39;t worry, the defaults are pulled from the local config file.</span>
</span><span class='line'>    <span class="n">HBaseConfiguration</span> <span class="n">config</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HBaseConfiguration</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// This instantiates an HTable object that connects you to the &quot;myTable&quot;</span>
</span><span class='line'>    <span class="c1">// table. </span>
</span><span class='line'>    <span class="n">HTable</span> <span class="n">table</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HTable</span><span class="o">(</span><span class="n">config</span><span class="o">,</span> <span class="s">&quot;myTable&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// To do any sort of update on a row, you use an instance of the BatchUpdate</span>
</span><span class='line'>    <span class="c1">// class. A BatchUpdate takes a row and optionally a timestamp which your</span>
</span><span class='line'>    <span class="c1">// updates will affect. </span>
</span><span class='line'>    <span class="n">BatchUpdate</span> <span class="n">batchUpdate</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BatchUpdate</span><span class="o">(</span><span class="s">&quot;myRow&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// The BatchUpdate#put method takes a Text that describes what cell you want</span>
</span><span class='line'>    <span class="c1">// to put a value into, and a byte array that is the value you want to </span>
</span><span class='line'>    <span class="c1">// store. Note that if you want to store strings, you have to getBytes() </span>
</span><span class='line'>    <span class="c1">// from the string for HBase to understand how to store it. (The same goes</span>
</span><span class='line'>    <span class="c1">// for primitives like ints and longs and user-defined classes - you must </span>
</span><span class='line'>    <span class="c1">// find a way to reduce it to bytes.)</span>
</span><span class='line'>    <span class="n">batchUpdate</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;myColumnFamily:columnQualifier1&quot;</span><span class="o">,</span> <span class="s">&quot;columnQualifier1 value!&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
</span><span class='line'>    <span class="c1">// Deletes are batch operations in HBase as well. </span>
</span><span class='line'>    <span class="n">batchUpdate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="s">&quot;myColumnFamily:cellIWantDeleted&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Once you&#39;ve done all the puts you want, you need to commit the results.</span>
</span><span class='line'>    <span class="c1">// The HTable#commit method takes the BatchUpdate instance you&#39;ve been </span>
</span><span class='line'>    <span class="c1">// building and pushes the batch of changes you made into HBase.</span>
</span><span class='line'>    <span class="n">table</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">batchUpdate</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Now, to retrieve the data we just wrote. The values that come back are</span>
</span><span class='line'>    <span class="c1">// Cell instances. A Cell is a combination of the value as a byte array and</span>
</span><span class='line'>    <span class="c1">// the timestamp the value was stored with. If you happen to know that the </span>
</span><span class='line'>    <span class="c1">// value contained is a string and want an actual string, then you must </span>
</span><span class='line'>    <span class="c1">// convert it yourself.</span>
</span><span class='line'>    <span class="n">Cell</span> <span class="n">cell</span> <span class="o">=</span> <span class="n">table</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;myRow&quot;</span><span class="o">,</span> <span class="s">&quot;myColumnFamily:columnQualifier1&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">valueStr</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">cell</span><span class="o">.</span><span class="na">getValue</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Sometimes, you won&#39;t know the row you&#39;re looking for. In this case, you</span>
</span><span class='line'>    <span class="c1">// use a Scanner. This will give you cursor-like interface to the contents</span>
</span><span class='line'>    <span class="c1">// of the table.</span>
</span><span class='line'>    <span class="n">Scanner</span> <span class="n">scanner</span> <span class="o">=</span>
</span><span class='line'>      <span class="c1">// we want to get back only &quot;myColumnFamily:columnQualifier1&quot; when we iterate</span>
</span><span class='line'>      <span class="n">table</span><span class="o">.</span><span class="na">getScanner</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;myColumnFamily:columnQualifier1&quot;</span><span class="o">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Scanners in HBase 0.2 return RowResult instances. A RowResult is like the</span>
</span><span class='line'>    <span class="c1">// row key and the columns all wrapped up in a single interface. </span>
</span><span class='line'>    <span class="c1">// RowResult#getRow gives you the row key. RowResult also implements </span>
</span><span class='line'>    <span class="c1">// Map, so you can get to your column results easily. </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Now, for the actual iteration. One way is to use a while loop like so:</span>
</span><span class='line'>    <span class="n">RowResult</span> <span class="n">rowResult</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">rowResult</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// print out the row we found and the columns we were looking for</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Found row: &quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">rowResult</span><span class="o">.</span><span class="na">getRow</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot; with value: &quot;</span> <span class="o">+</span>
</span><span class='line'>       <span class="n">rowResult</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;myColumnFamily:columnQualifier1&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">rowResult</span> <span class="o">=</span> <span class="n">scanner</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// The other approach is to use a foreach loop. Scanners are iterable!</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">RowResult</span> <span class="n">result</span> <span class="o">:</span> <span class="n">scanner</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// print out the row we found and the columns we were looking for</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Found row: &quot;</span> <span class="o">+</span> <span class="k">new</span> <span class="n">String</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">getRow</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot; with value: &quot;</span> <span class="o">+</span>
</span><span class='line'>       <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;myColumnFamily:columnQualifier1&quot;</span><span class="o">.</span><span class="na">getBytes</span><span class="o">()));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Make sure you close your scanners when you are done!</span>
</span><span class='line'>    <span class="n">scanner</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Voldemort:</h3>

<h4>Setup</h4>

<ul>
<li><p>Step 1: Download the code
Download either a recent stable release or, for those who like to live more dangerously, the up-to-the-minute build from the build server.</p></li>
<li><p>Step 2: Start single node cluster</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt; bin/voldemort-server.sh config/single_node_cluster &gt; /tmp/voldemort.log &amp;
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Step 3: Start commandline test client and do some operations</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  &gt; bin/voldemort-shell.sh <span class="nb">test </span>tcp://localhost:6666
</span><span class='line'>  Established connection to <span class="nb">test </span>via tcp://localhost:6666
</span><span class='line'>  &gt; put <span class="s2">&quot;hello&quot;</span> <span class="s2">&quot;world&quot;</span>
</span><span class='line'>  &gt; get <span class="s2">&quot;hello&quot;</span>   version<span class="o">(</span>0:1<span class="o">)</span>: <span class="s2">&quot;world&quot;</span>
</span><span class='line'>  &gt; delete <span class="s2">&quot;hello&quot;</span>
</span><span class='line'>  &gt; get <span class="s2">&quot;hello&quot;</span>   null
</span><span class='line'>  &gt; <span class="nb">exit  </span>k k thx bye.
</span></code></pre></td></tr></table></div></figure>


<h4>Programming</h4>

<p><strong>Client</strong>
Here is an example showing how to connect to a store as a client to do reads and writes from Java:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">String</span> <span class="n">bootstrapUrl</span> <span class="o">=</span> <span class="s">&quot;tcp://localhost:6666&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">StoreClientFactory</span> <span class="n">factory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SocketStoreClientFactory</span><span class="o">(</span><span class="k">new</span> <span class="n">ClientConfig</span><span class="o">().</span><span class="na">setBootstrapUrls</span><span class="o">(</span><span class="n">bootstrapUrl</span><span class="o">));</span>
</span><span class='line'><span class="c1">// create a client that executes operations on a single store</span>
</span><span class='line'><span class="n">StoreClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">factory</span><span class="o">.</span><span class="na">getStoreClient</span><span class="o">(</span><span class="s">&quot;my_store_name&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>After initializing the store client for every store once we can reuse it to run our queries as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// do some random pointless operations</span>
</span><span class='line'>  <span class="n">Versioned</span> <span class="n">value</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;some_key&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">value</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="s">&quot;some_value&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="n">client</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;some_key&quot;</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Note that StoreClient is just an interface, so for the purpose of unit testing we can completely mock the storage layer. This is something that is essentially impossible to do with a normal relational db since sql is the interface and it is vendor specific.</p>

<p><strong>Server</strong></p>

<p>There are three methods for using the server:
1. Start from the command line
You must first build the jar file using ant, as described above, then do the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ VOLDEMORT_HOME</span><span class="o">=</span><span class="s1">&#39;/path/to/voldemort&#39;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$VOLDEMORT_HOME</span>
</span><span class='line'><span class="nv">$ </span>./bin/voldemort-server.sh
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>Alternately we can give VOLDEMORT_HOME on the command line and avoid having to set an environment variable</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./bin/voldemort-server.sh /path/to/voldemort
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Embedded Server
You can instantiate the server directly in your code.</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">VoldemortConfig</span> <span class="n">config</span> <span class="o">=</span> <span class="n">VoldemortConfig</span><span class="o">.</span><span class="na">loadFromEnvironmentVariable</span><span class="o">();</span>
</span><span class='line'><span class="n">VoldemortServer</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">VoldemortServer</span><span class="o">(</span><span class="n">config</span><span class="o">);</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Deploy as a war
To do this build the war file using the</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ant war
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>target and deploy via whatever mechanism your servlet container supports.</p>

<h4>Kyoto Cabinet:</h4>

<h5>Setup</h5>

<p>Install the latest version of Kyoto Cabinet beforehand and get the package of the Java binding of Kyoto Cabinet. JDK 6 or later is also required.
Enter the directory of the extracted package then perform installation.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure
</span><span class='line'> make
</span><span class='line'> make check
</span><span class='line'> su make install
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>When a series of work finishes, the JAR file <code>kyotocabinet.jar' and the shared object files</code>libjkyotocabinet.so&#8217; and so on are installed under <code>/usr/local/lib'.
Let the class search path include</code>/usr/local/lib/kyotocabinet.jar&#8217; and let the library search path include `/usr/local/lib&#8217;.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">CLASSPATH</span><span class="o">=</span><span class="s2">&quot;$CLASSPATH:/usr/local/lib/kyotocabinet.jar&quot;</span> <span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">&quot;$LD_LIBRARY_PATH:/usr/local/lib&quot;</span> <span class="nb">export </span>CLASSPATH LD_LIBRARY_PATH
</span></code></pre></td></tr></table></div></figure>


<p>The above settings can be specified by options of the runtime command.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>java -cp .:kyotocabinet.jar -Djava.library.path<span class="o">=</span>.:/usr/local/lib FooBarBaz ...
</span></code></pre></td></tr></table></div></figure>


<p>All symbols of Kyoto Cabinet are defined in the package `kyotocabinet&#8217;. You can access them without any prefix by importing the package.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">kyotocabinet.*</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Programming</h5>

<p>The following code is a typical example to use a database.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">kyotocabinet.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KCDBEX1</span> <span class="o">{</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// create the object</span>
</span><span class='line'>     <span class="n">DB</span> <span class="n">db</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DB</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// open the database</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(!</span><span class="n">db</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="s">&quot;casket.kch&quot;</span><span class="o">,</span> <span class="n">DB</span><span class="o">.</span><span class="na">OWRITER</span> <span class="o">|</span> <span class="n">DB</span><span class="o">.</span><span class="na">OCREATE</span><span class="o">)){</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;open error: &quot;</span> <span class="o">+</span> <span class="n">db</span><span class="o">.</span><span class="na">error</span><span class="o">());</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>      <span class="c1">// store records</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(!</span><span class="n">db</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;hop&quot;</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>         <span class="o">!</span><span class="n">db</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;bar&quot;</span><span class="o">,</span> <span class="s">&quot;step&quot;</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>         <span class="o">!</span><span class="n">db</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;baz&quot;</span><span class="o">,</span> <span class="s">&quot;jump&quot;</span><span class="o">)){</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;set error: &quot;</span> <span class="o">+</span> <span class="n">db</span><span class="o">.</span><span class="na">error</span><span class="o">());</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>      <span class="c1">// retrieve records</span>
</span><span class='line'>     <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;set error: &quot;</span> <span class="o">+</span> <span class="n">db</span><span class="o">.</span><span class="na">error</span><span class="o">());</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>      <span class="c1">// traverse records</span>
</span><span class='line'>     <span class="n">Cursor</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">db</span><span class="o">.</span><span class="na">cursor</span><span class="o">();</span>
</span><span class='line'>     <span class="n">cur</span><span class="o">.</span><span class="na">jump</span><span class="o">();</span>
</span><span class='line'>     <span class="n">String</span><span class="o">[]</span> <span class="n">rec</span><span class="o">;</span>
</span><span class='line'>     <span class="k">while</span> <span class="o">((</span><span class="n">rec</span> <span class="o">=</span> <span class="n">cur</span><span class="o">.</span><span class="na">get_str</span><span class="o">(</span><span class="kc">true</span><span class="o">))</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">rec</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">rec</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>     <span class="n">cur</span><span class="o">.</span><span class="na">disable</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// close the database</span>
</span><span class='line'>     <span class="k">if</span><span class="o">(!</span><span class="n">db</span><span class="o">.</span><span class="na">close</span><span class="o">()){</span>
</span><span class='line'>       <span class="n">System</span><span class="o">.</span><span class="na">err</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;close error: &quot;</span> <span class="o">+</span> <span class="n">db</span><span class="o">.</span><span class="na">error</span><span class="o">());</span>
</span><span class='line'>     <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Redis</h4>

<h5>Setup</h5>

<p>Download, extract and compile Redis with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="nv">$ </span>wget http://redis.googlecode.com/files/redis-2.2.12.tar.gz
</span><span class='line'> <span class="nv">$ </span>tar xzf redis-2.2.12.tar.gz
</span><span class='line'> <span class="nv">$ </span><span class="nb">cd </span>redis-2.2.12
</span><span class='line'> <span class="nv">$ </span>make
</span></code></pre></td></tr></table></div></figure>


<h5>Programming</h5>

<p>Many Java clients, using Jedis for example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="n">Jedis</span> <span class="n">jedis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Jedis</span><span class="o">(</span><span class="s">&quot;localhost&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">jedis</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">,</span> <span class="s">&quot;bar&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">jedis</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">&quot;foo&quot;</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>MongoDB</h3>

<h4>Setup</h4>

<p>64-bit binaries</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl http://downloads.mongodb.org/osx/mongodb-osx-x86_64-x.y.z.tgz &gt; mongo.tgz <span class="nv">$ </span>tar xzf mongo.tgz
</span></code></pre></td></tr></table></div></figure>


<p>Replace x.y.z with the current stable version.
Create a data directory
By default MongoDB will store data in /data/db, but it won&rsquo;t automatically create that directory. To create it, do:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p /data/db
</span></code></pre></td></tr></table></div></figure>


<p>You can also tell MongoDB to use a different data directory, with the &mdash;dbpath option.
Run and connect to the server
First, start the MongoDB server in one terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./mongodb-xxxxxxx/bin/mongod
</span></code></pre></td></tr></table></div></figure>


<p>In a separate terminal, start the shell, which will connect to localhost by default:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./mongodb-xxxxxxx/bin/mongo &gt; db.foo.save<span class="o">(</span> <span class="o">{</span> a : 1 <span class="o">}</span> <span class="o">)</span> &gt; db.foo.find<span class="o">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Congratulations, you&rsquo;ve just saved and retrieved your first document with MongoDB!</p>

<h4>Programming</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">import</span> <span class="nn">com.mongodb.Mongo</span><span class="o">;</span>
</span><span class='line'> <span class="kn">import</span> <span class="nn">com.mongodb.DB</span><span class="o">;</span>
</span><span class='line'> <span class="kn">import</span> <span class="nn">com.mongodb.DBCollection</span><span class="o">;</span>
</span><span class='line'> <span class="kn">import</span> <span class="nn">com.mongodb.BasicDBObject</span><span class="o">;</span>
</span><span class='line'> <span class="kn">import</span> <span class="nn">com.mongodb.DBObject</span><span class="o">;</span>
</span><span class='line'> <span class="kn">import</span> <span class="nn">com.mongodb.DBCursor</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">Mongo</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Mongo</span><span class="o">();</span>
</span><span class='line'> <span class="c1">// or Mongo m = new Mongo( &quot;localhost&quot; );</span>
</span><span class='line'> <span class="c1">// or Mongo m = new Mongo( &quot;localhost&quot; , 27017 );</span>
</span><span class='line'> <span class="n">DB</span> <span class="n">db</span> <span class="o">=</span> <span class="n">m</span><span class="o">.</span><span class="na">getDB</span><span class="o">(</span> <span class="s">&quot;mydb&quot;</span> <span class="o">);</span>
</span><span class='line'> <span class="n">BasicDBObject</span> <span class="n">doc</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'> <span class="n">doc</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;name&quot;</span><span class="o">,</span> <span class="s">&quot;MongoDB&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">doc</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;type&quot;</span><span class="o">,</span> <span class="s">&quot;database&quot;</span><span class="o">);</span>
</span><span class='line'> <span class="n">doc</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;count&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'> <span class="n">BasicDBObject</span> <span class="n">info</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicDBObject</span><span class="o">();</span>
</span><span class='line'> <span class="n">info</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;x&quot;</span><span class="o">,</span> <span class="mi">203</span><span class="o">);</span>
</span><span class='line'> <span class="n">info</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;y&quot;</span><span class="o">,</span> <span class="mi">102</span><span class="o">);</span>
</span><span class='line'> <span class="n">doc</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;info&quot;</span><span class="o">,</span> <span class="n">info</span><span class="o">);</span>
</span><span class='line'> <span class="n">coll</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ruby Learning]]></title>
    <link href="http://seanguo.github.io/blog/2013/11/27/my-ruby-learning/"/>
    <updated>2013-11-27T09:39:36+08:00</updated>
    <id>http://seanguo.github.io/blog/2013/11/27/my-ruby-learning</id>
    <content type="html"><![CDATA[

<figure class='code'><figcaption><span>Output something</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/Users/sean/Desktop/test.rb&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Materials to Learn Chef]]></title>
    <link href="http://seanguo.github.io/blog/2013/11/26/materials-to-learn-chef/"/>
    <updated>2013-11-26T20:57:31+08:00</updated>
    <id>http://seanguo.github.io/blog/2013/11/26/materials-to-learn-chef</id>
    <content type="html"><![CDATA[<h2>Setup:</h2>

<h3>Develop tool:</h3>

<ul>
<li><p>Vagrant Setup: <a href="http://docs.vagrantup.com/v2/vagrantfile/vagrant_settings.html">http://docs.vagrantup.com/v2/vagrantfile/vagrant_settings.html</a></p></li>
<li><p>Get started guide: <a href="http://vialstudios.com/guide-authoring-cookbooks.html">http://vialstudios.com/guide-authoring-cookbooks.html</a></p></li>
<li><p>Another: <a href="http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/">http://misheska.com/blog/2013/06/16/getting-started-writing-chef-cookbooks-the-berkshelf-way/</a></p></li>
</ul>


<h2>Beginner:</h2>

<ul>
<li><a href="http://docs.opscode.com/chef/resources.html">http://docs.opscode.com/chef/resources.html</a></li>
<li><a href="http://docs.opscode.com/chef/lwrps_custom.html">http://docs.opscode.com/chef/lwrps_custom.html</a></li>
<li><a href="https://wiki.opscode.com/display/chef/Breaking+Changes+in+Chef+11">https://wiki.opscode.com/display/chef/Breaking+Changes+in+Chef+11</a></li>
<li><a href="http://docs.opscode.com/release_notes.html">http://docs.opscode.com/release_notes.html</a></li>
</ul>


<!-- more -->


<h2>Advanced:</h2>

<ul>
<li><a href="http://www.prashantrajan.com/posts/2013/06/leveling-up-chef-best-practices/">http://www.prashantrajan.com/posts/2013/06/leveling-up-chef-best-practices/</a></li>
<li><a href="http://erik.hollensbe.org/2013/03/16/the-chef-resource-run-queue/">http://erik.hollensbe.org/2013/03/16/the-chef-resource-run-queue/</a></li>
</ul>


<h3>Good cookbooks</h3>

<ul>
<li><a href="https://github.com/opscode/chef">https://github.com/opscode/chef</a></li>
<li><a href="https://github.com/RiotGames/artifact-cookbook">https://github.com/RiotGames/artifact-cookbook</a></li>
<li><a href="https://github.com/opscode-cookbooks/database">https://github.com/opscode-cookbooks/database</a></li>
<li><a href="https://github.com/opscode-cookbooks/mysql">https://github.com/opscode-cookbooks/mysql</a></li>
<li><a href="https://github.com/realityforge/chef-glassfish">https://github.com/realityforge/chef-glassfish</a></li>
</ul>


<h2>Testing:</h2>

<ul>
<li><a href="http://technology.customink.com/blog/2012/08/03/testing-chef-cookbooks/">http://technology.customink.com/blog/2012/08/03/testing-chef-cookbooks/</a></li>
</ul>


<h2>Ruby:</h2>

<ul>
<li><a href="http://ruby-doc.com/docs/ProgrammingRuby/">http://ruby-doc.com/docs/ProgrammingRuby/</a></li>
<li><a href="http://www.ruby-doc.org/">http://www.ruby-doc.org/</a></li>
<li><a href="http://rubydoc.info/gems/chef/11.6.0/frames">http://rubydoc.info/gems/chef/11.6.0/frames</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://seanguo.github.io/blog/2013/11/26/hello-world/"/>
    <updated>2013-11-26T15:42:16+08:00</updated>
    <id>http://seanguo.github.io/blog/2013/11/26/hello-world</id>
    <content type="html"><![CDATA[<p>Thanks <a href="http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/">http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/</a> I got this blog system working.</p>
]]></content>
  </entry>
  
</feed>
